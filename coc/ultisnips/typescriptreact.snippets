# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet rc "React Component" b
import React, { ReactElement } from "react";
import {} from "antd";

interface ${1}Props {

}

export const ${1} = (props: ${1}Props): ReactElement => {
	return <h1>Test</h1>;
};

endsnippet


snippet rf "React Form" b
import React, { ReactElement, useCallback } from "react";
import { FormInstance } from "antd/lib/form/Form";
import { Form } from "antd";

interface IProps {
	form: FormInstance;
}

const ${1} = ({ form }: IProps): ReactElement => {
	const validateFields = useCallback(() => {
		const values = form.getFieldsValue();
		const errorsFields = Object.keys(values).filter(
			(field) => form.getFieldError(field).length > 0 || !values[field]
		).length;
	}, [form]);

	return <Form form={form} onBlur={validateFields}></Form>;
};

export default ${1};
endsnippet

snippet rn "React Native Component" b
import React from "react"
import { observer } from "mobx-react-lite"
import { StyleSheet, View } from "react-native"

interface $1Props {

}

export const $1 = observer(({}: $1Props) => {
	return <View style={styles.container}></View>
})

const styles = StyleSheet.create({
	container: {},
})

endsnippet
