e55dea30cc178bf1a41e48f8eaef3506|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|53|29|v|typescriptreact
	:Booking
ae94f80b3ce82062a5dd7815daa04f9d|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|53|32|v|typescriptreact
	Complete
ec3696fa18291d30c1cf1b78203ee9d4|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|39|9|v|typescriptreact
	isFreeExeprience
189e368a53b0241ff2d101af140b9148|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|57|30|v|typescriptreact
	Your booking has been completed
7252d0a0645dde92866d1c9df5d4a7e4|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|57|30|v|typescriptreact
	'Your booking has been completed'
0c9cec70b2cf2eb3d2004759573f4001|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|113|1|V|typescriptreact
	          : booking?.experience?.type === EXPERIENCE_TYPE.ON_DEMAND_CONTENT && !isFreeExperience
8a06d2622befd9504887cf0e84d69112|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|115|1|V|typescriptreact
	          : bookingService
af918f1a38de4a147bc5e3ad88277dab|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-success/booking-success.tsx|127|1|V|typescriptreact
	                    booking.experience.type === CONTENT_TYPE.exclusiveContent && !isFreeExperience
3e9fbcf2539deee771d809d88f6c2033|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/i18n/en.json|101|5|V|json
	    "watch": "Watch",
d2974c96dc96b3f30a6168bcc4b25b02|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/i18n/en.json|101|6|v|json
	watch
f20658650d987d31063b593c05980397|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/i18n/en.json|101|24|v|json
	Watch
5b79c893beb022fc9f1d8fa90e345e66|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/i18n/en.json|101|6|v|json
	viewExperience
9efab2399c7c560b34de477b9aa0a465|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-success/booking-success.tsx|128|26|v|typescriptreact
	common
531da67b8641866ef43ff7b3d75b3f17|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|81|1|V|typescriptreact
	            {(booking?.experience?.type === EXPERIENCE_TYPE.ONE_TO_ONE ||
	              booking?.experience?.type === EXPERIENCE_TYPE.LIVE_CLASS) && (
	              <Text className="m__t--8 text__align--left text--default70">
	                {moment(booking?.date).format(screens["xs"] ? "h:mm A [•] MMM D, YYYY" : "h:mm A [•] ddd, MMM D, YYYY")}
	              </Text>
	            )}
39606efcfece40a2e9b9b8b1a09c502d|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|75|1|V|typescriptreact
	            {booking?.experience?.type === EXPERIENCE_TYPE.COURSE && (
	              <Text className="m__t--8 text__align--left text--default70">
	                {booking?.experience?.lessons?.length || 0} video lesson(s)
	              </Text>
	            )}
e7485c8a32641ab89816149290c5c215|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|88|60|v|typescriptreact
	COURSE
03acd92d15bd4b1954c0146b4d1e4d08|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/booking-item/booking-item.tsx|93|1|V|typescriptreact
	              {moment.duration({ seconds: duration || 0 }).humanize()}
d7af19ee516eb71a0fb5e8a61b82bab1|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|90|1|V|typescriptreact
	                {booking?.experience?.lessons?.length || 0} video lesson(s)
b85ec314bf443b797ef8a66b3b03f8a4|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|90|45|v|typescriptreact
	duration
5c8438bef7c60cf62b4a0aee3b0becc4|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|90|45|v|typescriptreact
	booking
36e87876cf8f3d6e6a9a9f793dcad719|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|350|9|V|typescriptreact
	        console.log(error)
fa04828bde0a6be2692cb14014d4fca0|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|352|18|v|typescriptreact
	error.message
5e0084c6238950d252b0c930e8350bfb|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|192|15|V|typescriptreact
	      console.l
4e18bda303cd9c71422a9117d20f9e16|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|289|1|V|typescriptreact
	          text1: translate("errors.pleaseAddPaymentMethod"),
99ee843301b290a05ec496c31e06f212|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|196|1|V|typescriptreact
	          messageTx: "errors.somethingWentWrong",
d748101f075c35e253ef856ac481e4d4|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|194|11|V|typescriptreact
	          titleTx: "errors.error",
81821f256e2acf3ed9b86eda6847ea27|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|195|18|v|typescriptreact
	translate("errors.pleaseAddPaymentMethod")
098f6bcd4621d373cade4e832627b4f6|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|195|18|v|typescriptreact
	test
6ea4781efced617c98c73767c020af03|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|352|1|V|typescriptreact
	          text1: error.message,
20a304713f8e9cbf09289e23fb9ae65d|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|383|1|V|typescriptreact
	          text1
f3f577058798e7c016de4599c5999073|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|382|1|V|typescriptreact
	        notifications.show({
	          type: "error",
	          text1: error.message,
	        })
cb5e100e5a9a3e7f6d1fd97512215282|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|373|20|v|typescriptreact
	error
6b733ca2d15407ed77a5909148b9f70f|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|364|1|V|typescriptreact
	          setIsLoadingBooking(false)
b646e83179edf235fc7dd43e08de1bdf|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/models/stores/booking-store.ts|115|24|V|typescript
	      console.log(result)
e84b0ddd303c520ccfeec5b83e962500|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|370|1|V|typescriptreact
	        } else if (booking?.message) {
	          setIsLoadingBooking(false)
	          notifications.show({
	            type: "error",
	            text1: booking.message,
	          })
	        } else {
b4394ac52d8ae995723b29312b46abfd|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|205|1|V|typescriptreact
	      } else if () {
	
	      }else {
d43e7830ac4b339a5844c6377ca470e5|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|206|9|V|typescriptreact
	        setIsLoadingBooking(false)
652915b4fddef800a4834ba4eb260986|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|166|13|v|typescriptreact
	isPreviousMessageFromSender
fc77aeebbd6847e398a178083d1906bb|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|165|15|V|typescriptreact
	      console.log(props.previousMessage)
4243255525f3a00a82e2e2994a5956d0|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|168|1|V|typescriptreact
	        props?.previousMessage?.type !== MessageType.Tip
34419aa3f6ddf889e1634335ae8b4d09|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/talent-detail-screen/talent-detail-screen.tsx|312|9|v|typescriptreact
	copyDynamicLink
fbf5d1c5093663277a5cdf904275eafc|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/talent-detail-screen/talent-detail-screen.tsx|412|42|v|typescriptreact
	followToggle
4f0957fc21bdc40f6c06a8106bdb65f8|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/talent-detail-screen/talent-detail-screen.tsx|335|1|V|typescriptreact
	    if (!accessToken) {
	      navigation.reset({
	        index: 0,
	        routes: [{ name: NavigationRoutes.AuthStack }],
	      })
	      notifications.show({
	        type: "warning",
	        text1: translate("errors.pleaseLoginToContinue"),
	      })
	      return
	    }
9f41cc9274e9553eab067496851fc39e|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/hoc/SignInRequiredHoc.tsx|17|1|V|typescriptreact
	      navigation.navigate(NavigationRoutes.AuthStack)
6d99b80d7bd77051fc5f5500e974bd2d|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|346|1|V|typescriptreact
	        navigation.reset({
	          index: 0,
	          routes: [{ name: NavigationRoutes.AuthStack }],
	        })
0b74b7b3292341fb4b5330f94edf823b|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/app.tsx|96|1|V|typescriptreact
	        await segmentAnalytics.init(CONFIG.SEGMENT_WRITE_KEY)
49c11b871dbe86279e401ff073a90e12|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/app.tsx|93|33|v|typescriptreact
	CONFIG.SEGMENT_WRITE_KEY
1d177db89bc443b0b00f78b753a5d4c9|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/app.tsx|93|33|v|typescriptreact
	g6cKQQ4HXXB6rG9bOsMG348tcUdDJfUR
c9b45d3f03b94c23c9f500c015b47b21|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/app.tsx|94|5|V|typescriptreact
	    await segmentAnalytics.init("g6cKQQ4HXXB6rG9bOsMG348tcUdDJfUR")
1af0389838508d7016a9841eb6273962|file:///Users/louis/Dev/Projects/komi/komi-client/src/utils/currency.ts|55|41|v|typescript
	currency
87d707fef3748a92ebc06e083019e622|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|1110|21|V|typescriptreact
	                  : content?.isFull
be4b1111dd971a64fea3bb849a98119d|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|1110|21|V|typescriptreact
	                  ? translate("common.soldOut")
53a761288a8234c36de3d0618f3dc2bd|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|1096|19|v|typescriptreact
	content.isFull
6151f0dcdb0797a1b5ec04c3a5e7f473|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|1106|17|v|typescriptreact
	content?.isFull
0a855c2224926aeceb60515b48f0d232|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/i18n/en.json|468|23|v|json
	The replay of this live available to watch in your booking details shortly.
8debae00dbf49e18d73b7ed06385e818|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/send-support-screen/send-support-screen.tsx|270|15|v|typescriptreact
	rightComponent
c852755f85e80bfa21ab754f8dde93dc|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/send-support-screen/send-support-screen.tsx|253|14|v|typescriptreact
	TextInput
788d641c83da63335e9e448407f49e07|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/text-input/text-input.tsx|117|9|v|typescriptreact
	renderLeftIcon
9c0653459884edbd9c822bdab3084d8a|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/text-input/text-input.tsx|187|29|v|typescriptreact
	inputContent
08fc13dee06cd01beb4bd367efceb830|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/text-input/text-input.tsx|190|18|v|typescriptreact
	inputRef
682b299e0b98ba8581b63dda579c57bd|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/text-input/text-input.tsx|176|29|v|typescriptreact
	focusedAnim
d8d86578aa4d5afff64c0b98a9a7bb8f|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/text-input/text-input.tsx|23|17|v|typescriptreact
	setValue
2063c1608d6e0baf80249c42e2be5804|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/text-input/text-input.tsx|188|12|v|typescriptreact
	value
367e854225a0810977297b3bedb2f309|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/text-input/text-input.tsx|188|22|v|typescriptreact
	isActive
6f1b73535fbec49b2d9fc514d454eeff|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/Price/Price.tsx|16|54|v|typescriptreact
	isExperiencePrice
bd04dda888cfc032573f2407b8a13cc2|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/Price/Price.tsx|13|1|V|typescriptreact
	  const exchangeRates = useTypedSelector(selectExchangeRates);
	  const currency = useTypedSelector(selectUserCurrency);
67ee349676ffc19f32774d83cecccff3|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/consumer-purchase-screen/components/consumer-support-history.tsx|59|62|v|typescriptreact
	item?.currency
72726f5b60185e2da6b444110b118d1f|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|195|42|v|typescriptreact
	getPrice(experience?.price || 0, currency, exchangeRates, true
3b749b7b013728dd62088b3c1259af46|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|205|13|V|typescriptreact
	    currency,
9d750ad0e89901ab8dccafab4628e3d2|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|205|18|V|typescriptreact
	    exchangeRates,
548f4eee82f91b8e6a0484b1cc934c5f|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/BookingSummary/BookingSummary.tsx|30|1|V|typescriptreact
	    let experiencePriceExchange = exchangeRates[getCurrentCurrency(currency, exchangeRates)] * (experience?.price || 0);
	    if (currency !== "USD") {
	      experiencePriceExchange = Math.floor(experiencePriceExchange) + 0.99;
	    }
1bac85ca3fe7aa6b2bedbeab9443be05|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/BookingSummary/BookingSummary.tsx|34|11|v|typescriptreact
	discountPriceExchange
e61ac2e45592fa3b20a1178394f975e3|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|194|23|v|typescriptreact
	getCurrentCurrency
d9a449a0042f289f2aa26aa4445e7d9b|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|199|42|v|typescriptreact
	experience?.localPrice || 0
5d3210c2838109c05e4b33378dc9cf23|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|53|1|V|typescriptreact
	import { SEGMENT_EVENT } from "constants/segment";
15fcbb60dc5e2961eb2534501a94d2a2|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|50|1|V|typescriptreact
	<<<<<<< Updated upstream
	import { selectUserData, selectUserCurrency } from "redux/User/selector";
	import { DISCOUNT_TYPE } from "redux/GiftsCode/types";
	import { SEGMENT_EVENT } from "constants/segment";
	import { getPrice } from "utils/currency";
	=======
458d87954d497eaec6094505a7042807|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|43|22|V|typescriptreact
	  selectExchangeRates,
8b22e9081b584dbca20e0ca5f3672fb5|file:///Users/louis/Dev/Projects/komi/komi-client/src/utils/container.tsx|55|18|v|typescriptreact
	{
	      const result = await userService.getLocation();
	      console.log(result);
	      if (result?.ok) {
	        const country = result?.response?.country;
	        const countryName: string = CountriesCurrency[country];
	        const currencies = CurrencyCodes.country(countryName?.toLowerCase());
	        if (currencies?.length > 0) {
	          const currency = ["GBP", "EUR", "USD"].includes(currencies[0]?.code) ? currencies[0]?.code : "USD";
	          Cookies.set(KOMI_CURRENCY, currency, { expires: 999999 });
	          dispatchRedux(
	            setUserValueAction({
	              currency: currency,
	            }),
	          );
	        }
	      }
	    })();
	  }, [dispatchRedux]);
	
	  const methods = {
	    startLoading() {
	      dispatch({ type: "loading", payload: true });
	    },
	
a26ed4fd25fcfdbc1142b43d3389f286|file:///Users/louis/Dev/Projects/komi/komi-client/.env|18|1|V|sh
	NEXT_PUBLIC_IP_GEO_LOCATION=9429f3f83e8c471d924e9226a6ce295f
cc234e82d29831d19da7ebc681d70bbf|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/user/User.tsx|130|14|v|typescriptreact
	MyExperiences
dfb9be853d931add81f27e5e831265e7|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/user/BookingHistory/SupportDetail/SupportDetail.tsx|149|21|v|typescriptreact
	iapTransaction
4ae59f9d6e940df29dffa1bffd396a05|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/experience/%5Bid%5D/LiveClassSection/LiveClassSection.tsx|27|1|V|typescriptreact
	  const currency = useTypedSelector(selectUserCurrency);
8d777f385d3dfec8815d20f7496026dc|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/TransactionHistoryCard/TransactionHistoryCard.tsx|55|66|v|typescriptreact
	data
980aa4c48549710a7a7c8aef27bcb71c|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/user/BookingHistory/SupportDetail/SupportDetail.tsx|152|56|v|typescriptreact
	transaction?.currencyCode as string
7684cee7a95d48a136a30425f1eb0054|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/constants/index.ts|12|14|v|typescript
	ALLOW_CURRENCY
e90cfc5a99e26ea9f94d6a1a5580f9da|file:///Users/louis/Dev/Projects/komi/komi-admin/src/pages/CreateExperience1To1/index.ts|1|26|v|typescript
	./CreateExperience1To1
79e316648573f88418e4a1d07563bce4|file:///Users/louis/Dev/Projects/komi/komi-admin/src/routes/index.tsx|41|49|v|typescriptreact
	pages/CreateExperience1To1
800b5175f0832a0e721e0b062e7ed111|file:///Users/louis/Dev/Projects/komi/komi-admin/src/routes/index.tsx|42|17|v|typescriptreact
	../../
e54debd65d8142e7785275aab411fd8f|file:///Users/louis/Dev/Projects/komi/komi-admin/tsconfig.json|20|8|v|jsonc
	dependency
7c3613dba5171cb6027c67835dd3b9d4|file:///Users/louis/Dev/Projects/komi/komi-admin/tsconfig.json|20|32|v|jsonc
	vendor
f9b2a59bdff6425cc6ebe21ea15841d1|file:///Users/louis/Dev/Projects/komi/komi-admin/tsconfig.json|20|32|v|jsonc
	/dependency/source/index.ts
b3b32a2d422265cd25c3323ed0157f81|file:///Users/louis/Dev/Projects/komi/komi-admin/src/routes/index.tsx|41|49|v|typescriptreact
	pages
b45ab149b0e0dd296ac12c2c0d3ea2bf|file:///Users/louis/Dev/Projects/komi/komi-admin/src/routes/index.tsx|42|17|v|typescriptreact
	./share-components-web/CreateExperience1To1
6787992d141ff42663b6e68e7a884d4d|file:///Users/louis/Dev/Projects/komi/komi-admin/src/hooks/index.ts|1|1|V|typescript
	export * from './useQuery'
5357f6af41335af11b6649fe4fe227e2|file:///Users/louis/Dev/Projects/komi/komi-admin/src/hooks/index.ts|2|18|v|typescript
	useQuery
0e6f473d6e00c9bab56f537ac8347d0c|file:///Users/louis/Dev/Projects/komi/komi-talent/src/hooks/useNotification.ts|1|1|V|typescript
	import { useEffect } from "react";
	
	import { useTypedSelector } from "redux/rootReducer";
	import {
	  selectResponseType,
	  selectResponseData,
	} from "redux/LogRequest/selector";
	import { RESPONSE_TYPE } from "redux/LogRequest/types";
	import notification from "utils/notification";
	
	export const useNotificationRequest = (): void => {
	  const responseType = useTypedSelector(selectResponseType);
	  const responseData = useTypedSelector(selectResponseData);
	
	  useEffect(() => {
	    const { message, code, type, statusCode } = responseData;
	
	    if (!message && !type) return;
	
	    const notificationData = {
	      message: type?.toUpperCase() || "Error",
	    };
	
	    if (responseType === RESPONSE_TYPE.SUCCESS) {
	      notification.success({
	        ...notificationData,
	        description: "",
	      });
	    }
	    if (responseType === RESPONSE_TYPE.ERROR) {
	      notification.error({
	        ...notificationData,
	        description: `${statusCode || code}: ${message}`,
	      });
	    }
	  }, [responseType, responseData]);
	};
15484190bcea026f2b95f22575040fb8|file:///Users/louis/Dev/Projects/komi/komi-admin/src/hooks/useNotification.ts|4|1|V|typescript
	import {
	  selectResponseType,
	  selectResponseData,
	} from "redux/LogRequest/selector";
bf982020a8075940ef83eb8811b58b75|file:///Users/louis/Dev/Projects/komi/komi-admin/src/hooks/useNotification.ts|4|31|V|typescript
	import { RESPONSE_TYPE } from "redux/LogRequest/types";
d08c4bf5c780e843a3a94c38ba304af4|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|70|25|v|typescriptreact
	setDiscountPrice
7ae6056878510def2cd256e190ca3b9f|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|194|25|V|typescriptreact
	      let experiencePriceExchange =
	        exchangeRates[getCurrentCurrency(currency, exchangeRates)] * (experience?.price || 0);
	      if (currency !== "USD") {
	        experiencePriceExchange = Math.floor(experiencePriceExchange) + 0.99;
	      }
	      console.log(experiencePriceExchange);
44b31a6cf0319b2b1ee5ba8271b1c552|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|194|42|v|typescriptreact
	experiencePriceExchange
7ce1d558fd827e574e374492de60b159|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|209|1|V|typescriptreact
	    exchangeRates,
	    currency,
b972fdba9048d5006454765525508d96|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|49|30|v|typescriptreact
	selectUserData
6680dba00f3a88f66f8029a93d71d93c|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/BookingSummary/BookingSummary.tsx|31|5|v|typescriptreact
	const
81755395087cdddd40b1f379d2fc17a3|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/BookingSummary/BookingSummary.tsx|23|54|v|typescriptreact
	discountPercentage
73a65452cdd916bf2ad5953a677e77d8|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/BookingSummary/BookingSummary.tsx|40|7|V|typescriptreact
	    const discountPriceExchange = exchangeRates[getCurrentCurrency(currency, exchangeRates)] * (discountPrice || 0);
c970961066a75f105fd9ff5c3cc5ac16|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/BookingSummary/BookingSummary.tsx|39|7|v|typescriptreact
	const discountPriceExchange
3c748cb7c0dc80ca87b82aadff05dcaa|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/BookingSummary/BookingSummary.tsx|31|36|v|typescriptreact
	xchangeRates[getCurrentCurrency(currency, exchangeRates)] * (experience?.price || 0)
b914ddf46737b430f24dc2b9c8c47737|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|70|1|V|typescriptreact
	  const [discountPrice, setDiscountPrice] = React.useState(0);
6196b66edbb416ecf62d81dd258d0530|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|71|10|v|typescriptreact
	discountPrice
d333a8c7592e9fff87d411578f8da30c|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|136|1|V|typescriptreact
	      setDiscountPrice(0);
1d8adad813efbf5de11cbbbf05e8530f|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|204|6|v|typescriptreact
	setDiscountPrice(discountAmount);
b5adc2476cab12c7143b02a76ac602ae|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|195|1|V|typescriptreact
	    if (giftCodeDiscountType === DISCOUNT_TYPE.PERCENTAGE) {
	      discountAmount = (discountAmount * (experience?.price || 0)) / 100;
	    }
78bf8fe6a5c762a51c4a30d9be36b7db|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/checkout/%5Bid%5D/Checkout.tsx|195|9|v|typescriptreact
	giftCodeDiscountType === DISCOUNT_TYPE.PERCENTAGE
00404af4a9ea35e1dc7cbc4fc5399769|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/BookingSummary/BookingSummary.tsx|41|38|V|typescriptreact
	    console.log(discountPriceExchange)
016ac241c6ad515f0aac954fab66cdac|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/BookingSummary/BookingSummary.tsx|87|18|v|typescriptreact
	getPrice(experience?.price || 0, currency, exchangeRates, true)
e0daf5243b6d6909673af3d555902596|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/BookingSummary/BookingSummary.tsx|98|17|v|typescriptreact
	getPrice(
	                  (exchangeRates[getCurrentCurrency(currency, exchangeRates)] *
	                    (experience?.price || 0) *
	                    discountPercentage) /
	                    100,
	                  currency,
	                  exchangeRates,
	                  true,
	                )
abcc388363adbfd39091b693a3a4d8ac|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/%5Busername%5D/TalentDetail.tsx|424|14|v|typescriptreact
	SendExpertTipSuccessful
517605a281e5d60bfd82a0962b319ea3|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/SendExpertTipSuccessful/SendExpertTipSuccessful.tsx|22|9|v|typescriptreact
	experienceImageWidth
90b26f96721d77a95ccd144962c6caf8|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|3|1|V|scss
	  min-width: 459px;
26c7ec4755c8d51c825435146b217ddd|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/SendExpertTipSuccessful/SendExpertTipSuccessful.tsx|26|49|v|typescriptreact
	send-tip-request-successful
12c875fd7865e89bf8e9a15f21660a00|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|3|1|V|scss
	  max-width: 459px;
88c2f49353e096839743ebde55df5505|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|12|19|V|scss
	      max-width: 459px;
b492bb4155014c897b740052e83f652b|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|6|1|V|scss
	  .send-tip-request-successful {
	    min-width: 459px;
	    max-width: 459px;
	
	    @include mobile {
	      min-width: 500px;
	    }
	  }
297ac9cef0a7fe9e1c80e67b1dac0028|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|12|18|v|scss
	459px
7705340b6fe9b63eeb69c4a1801fe0e5|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|11|7|v|scss
	min-width: 343px;
a127fd1f86e4ab650f2216f09992afa4|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|12|6|V|scss
	      
58d78f1c3039da60bb8b529de7e5fad4|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|12|23|V|scss
	      max-width: 343px;
9892bcc8bdd7e26dc6275e271878bdae|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|6|1|V|scss
	  .send-tip-request-successful {
	    min-width: 459px;
	    max-width: 459px;
	
	    @include mobile {
	      width: calc(100% - 32px) px;
	    }
	  }
e233148a6ade807e0de1beafc5318c78|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|115|19|V|scss
	    min-width: none
a5611c290512958b2eef179dd7013b4f|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|116|5|V|scss
	    min-width: calc(100% - 32px) !important;
53d93567c4612422210273a2960cea23|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|111|3|v|scss
	min-
a573ecb521f6c61c7efd747f41148c7f|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|112|3|v|scss
	max-
caaa8225fcf923d1d95466c1426443cb|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|112|5|V|scss
	  width: 459px;
c0ab74c47e5303aceb646ec3887fd99f|file:///Users/louis/Dev/Projects/komi/komi-client/src/styles/components/RequestSuccessful.scss|115|25|V|scss
	    width: calc(100% - 32px) !important;
c2020aedd539a9b3429ae1f4db86efb5|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|143|9|v|typescriptreact
	updateMessage
a308573737b39e4d4b5ccd62e2ffd788|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|152|9|v|typescriptreact
	setCurrentMessage
ef2103a741c1c9720ac7665acd807be3|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|176|36|V|typescriptreact
	          setCurrentMessage(message)
697856892a02f2a67cfebcc31eb670bd|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|174|29|v|typescriptreact
	updateChatMessage
32c8ff2a8c7dbc47d94610834bfeeaa3|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|143|9|v|typescriptreact
	updatcweMessage
66b60f2c151bdef3571ef0c31b1a9bcf|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|174|29|v|typescriptreact
	onSendChannelMessage
121dccd7f3c7d52103474d7af35398b2|fugitive:/Users/louis/Dev/Projects/komi/komi-mobile/.git//0/app/components/chat/chat.tsx|142|1|V|typescriptreact
	      updateChatMessage: (message) => {
	        updateMessage(message)
	      },
793e4f8b8f944b185d01468990383ff4|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|157|7|V|typescriptreact
	      updateChatMessage: (message) => {
f0a63600f73d4c29285584c85684eab4|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|142|1|V|typescriptreact
	        setCurrentMessage(message)
	        updateMessage(message)
f3e30541f75c2120a96ec86e60b1a8f5|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|154|1|V|typescriptreact
	        console.log(message)
	        await onSend(message)
0df93e34273b367bb63bad28c94c78d5|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|153|26|v|typescriptreact
	async
14285c6701119dadd397b2ffea9a1a98|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|174|29|v|typescriptreact
	onSendChatMessage
0ac64e289d3872bc88315f0ca274aeca|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/components/chat/chat.tsx|158|16|V|typescriptreact
	        console.
8fefd67e2e1b444cf9c58eb6da448d9b|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/send-support-screen/send-support-screen.tsx|50|30|v|typescriptreact
	successCallback
0254509f496314951176bdf1c6bf43d7|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|375|13|v|typescriptreact
	LiveStreamRoom
4ca5026a5ce00acfeb07c3f602f9eeb3|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-talent.tsx|28|5|v|typescriptreact
	 // onFinish,
ff3e4d5b953c931a0bb6ec643fe79429|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-talent.tsx|27|13|V|typescriptreact
	    onFinish,
bcfd9236d846811f5e16b6c389e865e3|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-talent.tsx|16|21|V|typescriptreact
	  onFinish: () => any
4e78ffc229ac1632a404bd43bc748f10|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/live-stream-header.tsx|144|24|V|typescriptreact
	            onFinish={onClose}
7ff04211bcd63da2a1c6a3a1ec61b553|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-consumer.tsx|8|1|V|typescriptreact
	  onClose: () => any
ffe3da9b5df847e9445577bb9e762182|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/video-call-room-screen/video-call-room-screen.tsx|312|24|v|typescriptreact
	showAlert
f33540a09ceb8e9bd9a4c4860e66a2f8|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/video-call-room-screen/video-call-room-screen.tsx|307|1|V|typescriptreact
	            <TouchableOpacity
	              style={[
	                styles.actionButton,
	                { backgroundColor: rgbColor(color.themeColor.red, 0.8) },
	              ]}
	              onPress={showAlert}
	            >
	              <Icon stroke={color.themeColor.white} name={"hangup-outline-white"} />
	            </TouchableOpacity>
8821245a43b5894d7cf16ec093fb1cc2|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/live-stream-header.tsx|144|13|v|typescriptreact
	onFinish
1deaa6d1c6e09bd8035ae78e57093898|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/live-stream-header.tsx|144|13|v|typescriptreact
	onFinsh
c834fe74a14982b40dfb9fc652019b5e|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/live-stream-header.tsx|135|46|v|typescriptreact
	actionContainer
cf68ca24980513ea9c7dfceaef94b000|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-talent.tsx|30|27|v|typescriptreact
	actionButtonGroup
895a135c545a92c0310762f5d6ef2ae9|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-consumer.tsx|22|43|v|typescriptreact
	actionButtonNested
8d2495ce8108188799d62f1a632c72fa|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-consumer.tsx|21|34|v|typescriptreact
	divider
e935c0b78cbf9d7e97fc2febcbdf5250|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-consumer.tsx|21|1|V|typescriptreact
	          <Divider style={styles.divider} />
2908050e771fb91a3afbb7809972e90c|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-talent.tsx|60|10|v|typescriptreact
	Divider
1a60835db780b4c26406766484040474|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-talent.tsx|6|15|V|typescriptreact
	import {Divider} from "react-native-elements"
511ec70ffc5d412049bbb583ef4626b8|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-consumer.tsx|63|1|V|typescriptreact
	  divider: {
	    width: 1,
	    height: 24,
	  },
a36559ac4de6b249d79b206b19e647e9|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-talent.tsx|105|3|V|typescriptreact
	    marginTop: spacing[4],
b4f69b65550da931701b2b2742a9ed46|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|251|11|v|typescriptreact
	renderContent
d5da25307f8c1c0082e17d0ea823d484|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-talent.tsx|1|1|V|typescriptreact
	    height: 10,
53ea3d38a1c5c446ecf043612a2baebf|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-talent.tsx|117|1|V|typescriptreact
	  divider: {
	    width: 1,
	  },
684c836e8b57247afe0194dc802f6d33|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/components/action-group-talent.tsx|60|1|V|typescriptreact
	        <Divider style={styles.divider} />
8b5f555e5cd482f652dab69eb540f76f|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|341|9|v|typescriptreact
	participants.length === 0
7bf1de9ee496edecf22dd106b418c082|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|341|9|v|typescriptreact
	participants.length === 0 && !isTalent
f703dffd2d39c020e0afc0ef744d9ff0|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|105|1|V|typescriptreact
	        setInitialMessages(RESET_MESSAGES)
f62d13d70f4fd098b6b9c2feb5f8134a|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|40|57|V|typescriptreact
	    return booking?.price === 0 || booking?.experience?.isFreeExperience;
4dc36f92367fe10ee80c1c5a8983435f|file:///Users/louis/Dev/Projects/komi/komi-client/src/components/RequestSuccessful/RequestSuccessful.tsx|40|12|v|typescriptreact
	booking?.price === 0 ||
8f61723144f1bf7b17c43245598582e5|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-success/booking-success.tsx|79|11|v|typescriptreact
	 booking?.price === 0 ||
b20c995b4ffd385cdfaccfef439a5a02|file:///Users/louis/Dev/Projects/komi/komi-client/src/utils/currency.ts|56|31|V|typescript
	  if (price === 0) return symbols + 0;
c8c9052788021c5b50876ec5123530fc|file:///Users/louis/Dev/Projects/komi/komi-client/src/utils/currency.ts|61|19|v|typescript
	formatPrice
e5ad03d87be5eaafa6f882aa16b905a7|file:///Users/louis/Dev/Projects/komi/komi-mobile/.env.production|1|9|v|
	https://api.komiapp.co/api
86408a7377a7685f1b1318b81263b596|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/services/api/api-config.ts|22|8|v|typescript
	CONFIG.API_URL || "https://localhost.local/api"
d9c4237758ac68a17ca49c2ef1f102ea|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|215|11|v|typescriptreact
	goBackHomeWithoutFinishCall
f21b106b9a36ac902fe7f6b5be541a6a|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-room-screen/live-stream-room-screen.tsx|230|59|v|typescriptreact
	confirmClose
b6467628fa115e6b9229e123100d0883|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-end-screen/live-stream-end-screen.tsx|150|1|V|typescriptreact
	              <Text
	                style={[MB_5, CENTER, styles.descriptionText]}
	                preset="regularR"
	                tx="liveStreamEndScreen.talent.description"
	              />
4f190e2d6f2b090ce7d07bf370f7ffb7|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/navigation/root-navigator.tsx|54|20|v|typescriptreact
	MainNavigator
dc90b2839602581a2fb34a84cb3dadba|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-end-screen/live-stream-end-screen.tsx|106|18|v|typescriptreact
	participantChunks
24ebc9a7e7d0509ca6b4d93a9fc1a2a3|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-end-screen/live-stream-end-screen.tsx|95|46|v|typescriptreact
	descriptionText
e772b99f72386e29bc6cd553fcb8908d|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-end-screen/live-stream-end-screen.tsx|95|25|v|typescriptreact
	MT_5
4d2e7559ee61da3c39a41a5a89f80631|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-end-screen/live-stream-end-screen.tsx|96|25|v|typescriptreact
	regularR
fafe07413f3c51559722db305c2811d7|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-end-screen/live-stream-end-screen.tsx|1|1|V|typescriptreact
	              <Text
	                style={[CENTER, styles.descriptionText]}
	                preset="regularR"
	                tx="liveStreamEndScreen.talent.description"
	              />
2b552991382189ca12d268c5b5397622|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-end-screen/live-stream-end-screen.tsx|174|1|V|typescriptreact
	            <Text
	              style={[MT_2, CENTER, styles.descriptionText]}
	              preset="regularR"
	              tx="liveStreamEndScreen.consumer.description"
	            />
effa1940168f99b4f4124ed7fa428ae6|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-end-screen/live-stream-end-screen.tsx|29|3|V|typescriptreact
	  MB_5,
1005b14bd29466723ace30d26f602f5b|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/live-stream-end-screen/live-stream-end-screen.tsx|96|41|v|typescriptreact
	consumer
57e5caa263cacd91d571ffc83f4f6ac2|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/i18n/en.json|472|1|V|json
	      "description": "The replay of your live class will be available soon for your viewer.",
eb7fe8b9df6744f65b1870ff63873ee9|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/i18n/en.json|469|7|V|json
	      "description": "We look forward to seeing you again next time."
a153c3f72f6ccb2d4791b28e4e0b8bf2|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|242|11|v|typescriptreact
	processIAP
c5a8edc6c579ae26c483314f8ffbbe36|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|205|9|v|typescriptreact
	else if (booking?.message) {
59c9e5b5f922aa60a4a19a6be843dbad|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|206|1|V|typescriptreact
	        notifications.show({
	          type: "error",
	          text1: booking.message,
	        })
a1d7d45c556259ce2761f088bbe7a957|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|379|10|v|typescriptreact
	 else if (booking?.message) {
2e6e9f01af73ae657b09e4a506d63a28|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/1-to-1-experience-detail/1-to-1-experience-detail.tsx|380|1|V|typescriptreact
	          setIsLoadingBooking(false)
	          notifications.show({
	            type: "error",
	            text1: booking.message,
	          })
8f6b8d61c8260dfda072aed1f9177f28|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|325|34|V|typescriptreact
	        console.log(currentBooking)
2477e9c701e631560fb6e71bde9369f1|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|335|13|V|typescriptreact
	            )
43bafe36f4b08c1a45f36b795cbf58f3|file:///Users/louis/Dev/Projects/komi/komi-mobile/app/screens/booking-payment-screen/booking-payment-screen.tsx|1|1|V|typescriptreact
	            console.log(receipt)
48289d93cf481c15c71ed9068a7c0a71|file:///Users/louis/.config/nvim/init.vim|10|1|V|vim
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
b86b47e4613f20fdfa651dbf90581535|file:///Users/louis/.config/bootstrap/mac.sh|112|1|V|sh
	  read -r -p "Do you want to install window manager? [y|N] " response
	  if [[ $response =~ (y|yes|Y) ]];then
d24bc844e0968b894299d64f0fd0345d|file:///Users/louis/.config/bootstrap/mac.sh|151|38|v|sh
	window manager
704016651320b240cdb2f52dd61a367a|file:///Users/louis/.config/nvim/init.vim|10|1|V|vim
	" Plug 'vim-airline/vim-airline'
	" Plug 'vim-airline/vim-airline-themes'
7331ec6af30baeb1c0e488b157c971fe|file:///Users/louis/.config/nvim/init.vim|62|32|V|vim
	" source ~/.config/nvim/config/airline.vim
52fa64da80f5e6d3dc2a44a29eec2636|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|1|1|V|lua
	-- require'nvim-web-devicons'.setup()
	
	local gl = require('galaxyline')
	local gls = gl.section
	gl.short_line_list = {'LuaTree','vista','dbui'}
	
	local colors = {
	  bg = '#282c34',
	  yellow = '#fabd2f',
	  cyan = '#008080',
	  darkblue = '#081633',
	  green = '#608B4E',
	  orange = '#FF8800',
	  purple = '#5d4d7a',
	  magenta = '#d16d9e',
	  grey = '#c0c0c0',
	  blue = '#569CD6',
	  red = '#D16969'
	}
	
	local buffer_not_empty = function()
	  if vim.fn.empty(vim.fn.expand('%:t')) ~= 1 then
	    return true
	  end
	  return false
	end
	
	-- gls.left[1] = {
	--   FirstElement = {
	--     -- provider = function() return '?' end,
	--     provider = function() return ' ' end,
	--     highlight = {colors.bg,colors.bg}
	--   },
	-- }
	-- gls.left[2] = {
	--   ViMode = {
	--     provider = function()
	--       local alias = {n = 'NORMAL',i = 'INSERT',c= 'COMMAND',V= 'VISUAL', [''] = 'VISUAL'}
	--       return alias[vim.fn.mode()]
	--     end,
	--     separator = ' ',
	--     separator_highlight = {colors.yellow,function()
	--       if not buffer_not_empty() then
	--         return colors.purple
	--       end
	--       return colors.purple
	--     end},
	--     highlight = {colors.grey,colors.purple,'bold'},
	--   },
	-- }
	gls.left[2] = {
	  ViMode = {
	    provider = function()
	      -- auto change color according the vim mode
	      local mode_color = {n = colors.purple,
	        i = colors.green,
	        v = colors.blue,
	        [''] = colors.blue,
	        V = colors.blue,
	        c = colors.purple,
	        no = colors.magenta,
	        s = colors.orange,
	        S = colors.orange,
	        [''] = colors.orange,
	        ic = colors.yellow,
	        R = colors.red,
	        Rv = colors.red,
	        cv = colors.red,
	        ce=colors.red,
	        r = colors.cyan,
	        rm = colors.cyan,
	        ['r?'] = colors.cyan,
	        ['!']  = colors.red,
	      t = colors.red}
	      vim.api.nvim_command('hi GalaxyViMode guibg='..mode_color[vim.fn.mode()])
	      return '  NVCode '
	    end,
	    separator = ' ',
	    separator_highlight = {colors.yellow,function()
	      if not buffer_not_empty() then
	        return colors.bg
	      end
	      return colors.bg
	    end},
	    highlight = {colors.grey,colors.bg,'bold'},
	  },
	}
	-- gls.left[3] ={
	--   FileIcon = {
	--     separator = ' ',
	--     provider = 'FileIcon',
	--     condition = buffer_not_empty,
	--     highlight = {require('galaxyline.provider_fileinfo').get_file_icon_color,colors.bg},
	--   },
	-- }
	-- gls.left[4] = {
	--   FileName = {
	--     provider = {'FileSize'},
	--     condition = buffer_not_empty,
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.magenta,colors.bg}
	--   }
	-- }
	
	gls.left[3] = {
	  GitIcon = {
	    provider = function() return '? ' end,
	    condition = buffer_not_empty,
	    highlight = {colors.orange,colors.bg},
	  }
	}
	gls.left[4] = {
	  GitBranch = {
	    provider = 'GitBranch',
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    condition = buffer_not_empty,
	    highlight = {colors.grey,colors.bg},
	  }
	}
	
	local checkwidth = function()
	  local squeeze_width  = vim.fn.winwidth(0) / 2
	  if squeeze_width > 40 then
	    return true
	  end
	  return false
	end
	
	gls.left[5] = {
	  DiffAdd = {
	    provider = 'DiffAdd',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = ' ? ',
	    highlight = {colors.green,colors.bg},
	  }
	}
	gls.left[6] = {
	  DiffModified = {
	    provider = 'DiffModified',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = ' ? ',
	    highlight = {colors.blue,colors.bg},
	  }
	}
	gls.left[7] = {
	  DiffRemove = {
	    provider = 'DiffRemove',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = ' ? ',
	    highlight = {colors.red,colors.bg},
	  }
	}
	gls.left[8] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.purple,colors.bg}
	  }
	}
	gls.left[9] = {
	  DiagnosticError = {
	    provider = 'DiagnosticError',
	    icon = ' ? ',
	    highlight = {colors.red,colors.bg}
	  }
	}
	gls.left[10] = {
	  Space = {
	    provider = function () return '' end
	  }
	}
	gls.left[11] = {
	  DiagnosticWarn = {
	    provider = 'DiagnosticWarn',
	    icon = ' ? ',
	    highlight = {colors.yellow,colors.bg},
	  }
	}
	gls.left[12] = {
	  DiagnosticHint = {
	    provider = 'DiagnosticHint',
	    icon = '  ? ',
	    highlight = {colors.blue,colors.bg},
	  }
	}
	gls.left[13] = {
	  DiagnosticInfo = {
	    provider = 'DiagnosticInfo',
	    icon = '  ? ',
	    highlight = {colors.orange,colors.bg},
	  }
	}
	gls.right[1]= {
	  FileFormat = {
	    provider = 'FileFormat',
	    separator = ' ',
	    separator_highlight = {colors.bg,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
	gls.right[2] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    separator = ' | ',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  },
	}
	gls.right[3] = {
	  PerCent = {
	    provider = 'LinePercent',
	    separator = ' |',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
	gls.right[4] = {
	  ScrollBar = {
	    provider = 'ScrollBar',
	    highlight = {colors.yellow,colors.purple},
	  }
	}
	
	-- gls.short_line_left[1] = {
	--   BufferType = {
	--     provider = 'FileTypeName',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	
	gls.short_line_left[1] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.purple,colors.bg}
	  }
	}
	
	-- gls.short_line_right[1] = {
	--   BufferIcon = {
	--     provider= 'BufferIcon',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	-- function! s:my_bookmark_color() abort
	--   let s:scl_guibg = matchstr(execute('hi SignColumn'), 'guibg=\zs\S*')
	--   if empty(s:scl_guibg)
	--     let s:scl_guibg = 'NONE'
	--   endif
	--   exe 'hi MyBookmarkSign guifg=' . s:scl_guibg
	-- endfunction
	-- call s:my_bookmark_color() " don't remove this line!
	
	-- augroup UserGitSignColumnColor
	--   autocmd!
	--   autocmd ColorScheme * call s:my_bookmark_color()
	-- augroup END
92f7fa3d430d2105446f37876c19b797|file:///Users/louis/.config/nvim/init.vim|15|1|V|vim
	Plug "Iron-E/nvim-highlite"
68165ed8f11f28f21ab49c14864c2591|file:///Users/louis/.config/nvim/init.vim|15|1|V|vim
	Plug "iron-E/nvim-highlite"
695843a6e4efd9b6a1741947ca666a5e|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|1|1|V|lua
	local gl = require('galaxyline')
	local utils = require('utils')
	
	local gls = gl.section
	gl.short_line_list = { 'defx', 'packager', 'vista' }
	
	-- Colors
	local colors = {
	  bg = '#282a36',
	  fg = '#f8f8f2',
	  section_bg = '#38393f',
	  yellow = '#f1fa8c',
	  cyan = '#8be9fd',
	  green = '#50fa7b',
	  orange = '#ffb86c',
	  magenta = '#ff79c6',
	  blue = '#8be9fd',
	  red = '#ff5555'
	}
	
	-- Local helper functions
	local buffer_not_empty = function()
	  return not utils.is_buffer_empty()
	end
	
	local checkwidth = function()
	  return utils.has_width_gt(40) and buffer_not_empty()
	end
	
	local mode_color = function()
	  local mode_colors = {
	    n = colors.cyan,
	    i = colors.green,
	    c = colors.orange,
	    V = colors.magenta,
	    [''] = colors.magenta,
	    v = colors.magenta,
	    R = colors.red,
	  }
	
	  return mode_colors[vim.fn.mode()]
	end
	
	-- Left side
	gls.left[1] = {
	  FirstElement = {
	    provider = function() return '?' end,
	    highlight = { colors.cyan, colors.section_bg }
	  },
	}
	gls.left[2] = {
	  ViMode = {
	    provider = function()
	      local alias = {
	        n = 'NORMAL',
	        i = 'INSERT',
	        c = 'COMMAND',
	        V = 'VISUAL',
	        [''] = 'VISUAL',
	        v = 'VISUAL',
	        R = 'REPLACE',
	      }
	      vim.api.nvim_command('hi GalaxyViMode guifg='..mode_color())
	      return alias[vim.fn.mode()]..' '
	    end,
	    highlight = { colors.bg, colors.bg },
	    separator = "?  ",
	    separator_highlight = {colors.bg, colors.section_bg},
	  },
	}
	gls.left[3] ={
	  FileIcon = {
	    provider = 'FileIcon',
	    condition = buffer_not_empty,
	    highlight = { require('galaxyline.provider_fileinfo').get_file_icon_color, colors.section_bg },
	  },
	}
	gls.left[4] = {
	  FileName = {
	    provider = { 'FileName', 'FileSize' },
	    condition = buffer_not_empty,
	    highlight = { colors.fg, colors.section_bg },
	    separator = "? ",
	    separator_highlight = {colors.section_bg, colors.bg},
	  }
	}
	gls.left[5] = {
	  GitIcon = {
	    provider = function() return ' ? ' end,
	    condition = buffer_not_empty,
	    highlight = {colors.red,colors.bg},
	  }
	}
	gls.left[6] = {
	  GitBranch = {
	    provider = 'GitBranch',
	    condition = buffer_not_empty,
	    highlight = {colors.fg,colors.bg},
	  }
	}
	gls.left[7] = {
	  DiffAdd = {
	    provider = 'DiffAdd',
	    condition = checkwidth,
	    icon = '? ',
	    highlight = { colors.green, colors.bg },
	  }
	}
	gls.left[8] = {
	  DiffModified = {
	    provider = 'DiffModified',
	    condition = checkwidth,
	    icon = '? ',
	    highlight = { colors.orange, colors.bg },
	  }
	}
	gls.left[9] = {
	  DiffRemove = {
	    provider = 'DiffRemove',
	    condition = checkwidth,
	    icon = '? ',
	    highlight = { colors.red,colors.bg },
	  }
	}
	gls.left[10] = {
	  LeftEnd = {
	    provider = function() return '? ' end,
	    condition = buffer_not_empty,
	    highlight = {colors.section_bg,colors.bg}
	  }
	}
	gls.left[11] = {
	  DiagnosticError = {
	    provider = 'DiagnosticError',
	    icon = ' ? ',
	    highlight = {colors.red,colors.section_bg}
	  }
	}
	gls.left[12] = {
	  Space = {
	    provider = function () return ' ' end,
	    highlight = {colors.section_bg,colors.section_bg},
	  }
	}
	gls.left[13] = {
	  DiagnosticWarn = {
	    provider = 'DiagnosticWarn',
	    icon = ' ? ',
	    highlight = {colors.orange,colors.section_bg},
	  }
	}
	gls.left[14] = {
	  Space = {
	    provider = function () return ' ' end,
	    highlight = {colors.section_bg,colors.section_bg},
	  }
	}
	gls.left[15] = {
	  DiagnosticInfo = {
	    provider = 'DiagnosticInfo',
	    icon = ' ? ',
	    highlight = {colors.blue,colors.section_bg},
	    separator = '? ',
	    separator_highlight = { colors.section_bg, colors.bg },
	  }
	}
	
	-- Right side
	gls.right[1]= {
	  FileFormat = {
	    provider = function() return vim.bo.filetype end,
	    highlight = { colors.fg,colors.section_bg },
	    separator = '? ',
	    separator_highlight = { colors.section_bg,colors.bg },
	  }
	}
	gls.right[2] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    highlight = { colors.fg, colors.section_bg },
	    separator = ' | ',
	    separator_highlight = { colors.bg, colors.section_bg },
	  },
	}
	gls.right[3] = {
	  Heart = {
	    provider = function() return '? ' end,
	    highlight = { colors.red, colors.section_bg },
	    separator = ' | ',
	    separator_highlight = { colors.bg, colors.section_bg },
	  }
	}
	
	-- Short status line
	gls.short_line_left[1] = {
	  BufferType = {
	    provider = 'FileTypeName',
	    highlight = { colors.fg, colors.section_bg },
	    separator = '? ',
	    separator_highlight = { colors.section_bg, colors.bg },
	  }
	}
	
	gls.short_line_right[1] = {
	  BufferIcon = {
	    provider= 'BufferIcon',
	    highlight = { colors.yellow, colors.section_bg },
	    separator = '? ',
	    separator_highlight = { colors.section_bg, colors.bg },
	  }
	}
	
	-- Force manual load so that nvim boots with a status line
	gl.load_galaxyline()
0a19c0aa5ca211511ad1c835ad478088|file:///Users/louis/.config/nvim/init.vim|12|7|V|vim
	Plug 'glepnir/galaxyline.nvim'
42db6877d38c90743d9265bff4b5bc2d|file:///Users/louis/.config/nvim/init.vim|14|7|V|vim
	Plug 'glepnir/galaxyline.nvim' , {'branch': 'main'}
d37e5701bb6211742ab55289f5eb5fcf|file:///Users/louis/.config/nvim/init.vim|76|1|V|vim
	luafile ~/.config/nvim/lua/plugins/galaxyline-config.lua
5fb6e7c96ad58488d850b350bfe3a829|file:///Users/louis/.config/nvim/init.vim|8|1|V|vim
	if has('nvim-0.5') " Source packer.nvim configuration
	  lua require 'dump'
447abbc025b46db8819d51c83cc5480b|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|1|1|V|lua
	-- require'nvim-web-devicons'.setup()
	--
	local gl = require('galaxyline')
	local utils = require('utils')
	
	local gls = gl.section
	gl.short_line_list = { 'defx', 'packager', 'vista' }
	
	-- Colors
	local colors = {
	  bg = '#282a36',
	  fg = '#f8f8f2',
	  section_bg = '#38393f',
	  yellow = '#f1fa8c',
	  cyan = '#8be9fd',
	  green = '#50fa7b',
	  orange = '#ffb86c',
	  magenta = '#ff79c6',
	  blue = '#8be9fd',
	  red = '#ff5555'
	}
	
	-- Local helper functions
	local buffer_not_empty = function()
	  return not utils.is_buffer_empty()
	end
	
	local checkwidth = function()
	  return utils.has_width_gt(40) and buffer_not_empty()
	end
	
	local mode_color = function()
	  local mode_colors = {
	    n = colors.cyan,
	    i = colors.green,
	    c = colors.orange,
	    V = colors.magenta,
	    [''] = colors.magenta,
	    v = colors.magenta,
	    R = colors.red,
	  }
	
	  return mode_colors[vim.fn.mode()]
	end
	
	-- Left side
	gls.left[1] = {
	  FirstElement = {
	    provider = function() return '▋' end,
	    highlight = { colors.cyan, colors.section_bg }
	  },
	}
	gls.left[2] = {
	  ViMode = {
	    provider = function()
	      local alias = {
	        n = 'NORMAL',
	        i = 'INSERT',
	        c = 'COMMAND',
	        V = 'VISUAL',
	        [''] = 'VISUAL',
	        v = 'VISUAL',
	        R = 'REPLACE',
	      }
	      vim.api.nvim_command('hi GalaxyViMode guifg='..mode_color())
	      return alias[vim.fn.mode()]..' '
	    end,
	    highlight = { colors.bg, colors.bg },
	    separator = "  ",
	    separator_highlight = {colors.bg, colors.section_bg},
	  },
	}
	gls.left[3] ={
	  FileIcon = {
	    provider = 'FileIcon',
	    condition = buffer_not_empty,
	    highlight = { require('galaxyline.provider_fileinfo').get_file_icon_color, colors.section_bg },
	  },
	}
	gls.left[4] = {
	  FileName = {
	    provider = { 'FileName', 'FileSize' },
	    condition = buffer_not_empty,
	    highlight = { colors.fg, colors.section_bg },
	    separator = " ",
	    separator_highlight = {colors.section_bg, colors.bg},
	  }
	}
	gls.left[5] = {
	  GitIcon = {
	    provider = function() return '  ' end,
	    condition = buffer_not_empty,
	    highlight = {colors.red,colors.bg},
	  }
	}
	gls.left[6] = {
	  GitBranch = {
	    provider = 'GitBranch',
	    condition = buffer_not_empty,
	    highlight = {colors.fg,colors.bg},
	  }
	}
	gls.left[7] = {
	  DiffAdd = {
	    provider = 'DiffAdd',
	    condition = checkwidth,
	    icon = ' ',
	    highlight = { colors.green, colors.bg },
	  }
	}
	gls.left[8] = {
	  DiffModified = {
	    provider = 'DiffModified',
	    condition = checkwidth,
	    icon = ' ',
	    highlight = { colors.orange, colors.bg },
	  }
	}
	gls.left[9] = {
	  DiffRemove = {
	    provider = 'DiffRemove',
	    condition = checkwidth,
	    icon = ' ',
	    highlight = { colors.red,colors.bg },
	  }
	}
	gls.left[10] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    condition = buffer_not_empty,
	    highlight = {colors.section_bg,colors.bg}
	  }
	}
	gls.left[11] = {
	  DiagnosticError = {
	    provider = 'DiagnosticError',
	    icon = '  ',
	    highlight = {colors.red,colors.section_bg}
	  }
	}
	gls.left[12] = {
	  Space = {
	    provider = function () return ' ' end,
	    highlight = {colors.section_bg,colors.section_bg},
	  }
	}
	gls.left[13] = {
	  DiagnosticWarn = {
	    provider = 'DiagnosticWarn',
	    icon = '  ',
	    highlight = {colors.orange,colors.section_bg},
	  }
	}
	gls.left[14] = {
	  Space = {
	    provider = function () return ' ' end,
	    highlight = {colors.section_bg,colors.section_bg},
	  }
	}
	gls.left[15] = {
	  DiagnosticInfo = {
	    provider = 'DiagnosticInfo',
	    icon = '  ',
	    highlight = {colors.blue,colors.section_bg},
	    separator = ' ',
	    separator_highlight = { colors.section_bg, colors.bg },
	  }
	}
	
	-- Right side
	gls.right[1]= {
	  FileFormat = {
	    provider = function() return vim.bo.filetype end,
	    highlight = { colors.fg,colors.section_bg },
	    separator = ' ',
	    separator_highlight = { colors.section_bg,colors.bg },
	  }
	}
	gls.right[2] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    highlight = { colors.fg, colors.section_bg },
	    separator = ' | ',
	    separator_highlight = { colors.bg, colors.section_bg },
	  },
	}
	gls.right[3] = {
	  Heart = {
	    provider = function() return ' ' end,
	    highlight = { colors.red, colors.section_bg },
	    separator = ' | ',
	    separator_highlight = { colors.bg, colors.section_bg },
	  }
	}
	
	-- Short status line
	gls.short_line_left[1] = {
	  BufferType = {
	    provider = 'FileTypeName',
	    highlight = { colors.fg, colors.section_bg },
	    separator = ' ',
	    separator_highlight = { colors.section_bg, colors.bg },
	  }
	}
	
	gls.short_line_right[1] = {
	  BufferIcon = {
	    provider= 'BufferIcon',
	    highlight = { colors.yellow, colors.section_bg },
	    separator = ' ',
	    separator_highlight = { colors.section_bg, colors.bg },
	  }
	}
	
	-- Force manual load so that nvim boots with a status line
	gl.load_galaxyline()
69cf7ad870dc9a19528058904bbaaddd|file:///Users/louis/.config/nvim/init.vim|10|24|V|vim
	Plug 'ryanoasis/vim-devicons'
5120e5d1252cca3c6695b71713b1687f|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|43|18|V|lua
	-- require'nvim-web-devicons'.setup()
	
	local gl = require('galaxyline')
	local gls = gl.section
	gl.short_line_list = {'LuaTree','vista','dbui'}
	
	local colors = {
	  bg = '#282c34',
	  yellow = '#fabd2f',
	  cyan = '#008080',
	  darkblue = '#081633',
	  green = '#608B4E',
	  orange = '#FF8800',
	  purple = '#5d4d7a',
	  magenta = '#d16d9e',
	  grey = '#c0c0c0',
	  blue = '#569CD6',
	  red = '#D16969'
	}
	
	local buffer_not_empty = function()
	  if vim.fn.empty(vim.fn.expand('%:t')) ~= 1 then
	    return true
	  end
	  return false
	end
	
	-- gls.left[1] = {
	--   FirstElement = {
	--     -- provider = function() return '?' end,
	--     provider = function() return ' ' end,
	--     highlight = {colors.bg,colors.bg}
	--   },
	-- }
	-- gls.left[2] = {
	--   ViMode = {
	--     provider = function()
	--       local alias = {n = 'NORMAL',i = 'INSERT',c= 'COMMAND',V= 'VISUAL', [''] = 'VISUAL'}
	--       return alias[vim.fn.mode()]
	--     end,
	--     separator = ' ',
	--     separator_highlight = {colors.yellow,function()
	--       if not buffer_not_empty() then
	--         return colors.purple
	--       end
	--       return colors.purple
	--     end},
	--     highlight = {colors.grey,colors.purple,'bold'},
	--   },
	-- }
	gls.left[2] = {
	  ViMode = {
	    provider = function()
	      -- auto change color according the vim mode
	      local mode_color = {n = colors.purple,
	                          i = colors.green,
	                          v = colors.blue,
	                          [''] = colors.blue,
	                          V = colors.blue,
	                          c = colors.purple,
	                          no = colors.magenta,
	                          s = colors.orange,
	                          S = colors.orange,
	                          [''] = colors.orange,
	                          ic = colors.yellow,
	                          R = colors.red,
	                          Rv = colors.red,
	                          cv = colors.red,
	                          ce=colors.red,
	                          r = colors.cyan,
	                          rm = colors.cyan,
	                          ['r?'] = colors.cyan,
	                          ['!']  = colors.red,
	                          t = colors.red}
	      vim.api.nvim_command('hi GalaxyViMode guibg='..mode_color[vim.fn.mode()])
	      return '  NVCode '
	    end,
	    separator = ' ',
	    separator_highlight = {colors.yellow,function()
	      if not buffer_not_empty() then
	        return colors.bg
	      end
	      return colors.bg
	    end},
	    highlight = {colors.grey,colors.bg,'bold'},
	  },
	}
	-- gls.left[3] ={
	--   FileIcon = {
	--     separator = ' ',
	--     provider = 'FileIcon',
	--     condition = buffer_not_empty,
	--     highlight = {require('galaxyline.provider_fileinfo').get_file_icon_color,colors.bg},
	--   },
	-- }
	-- gls.left[4] = {
	--   FileName = {
	--     provider = {'FileSize'},
	--     condition = buffer_not_empty,
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.magenta,colors.bg}
	--   }
	-- }
	
	gls.left[3] = {
	  GitIcon = {
	    provider = function() return '? ' end,
	    condition = buffer_not_empty,
	    highlight = {colors.orange,colors.bg},
	  }
	}
	gls.left[4] = {
	  GitBranch = {
	    provider = 'GitBranch',
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    condition = buffer_not_empty,
	    highlight = {colors.grey,colors.bg},
	  }
	}
	
	local checkwidth = function()
	  local squeeze_width  = vim.fn.winwidth(0) / 2
	  if squeeze_width > 40 then
	    return true
	  end
	  return false
	end
	
	gls.left[5] = {
	  DiffAdd = {
	    provider = 'DiffAdd',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = ' ? ',
	    highlight = {colors.green,colors.bg},
	  }
	}
	gls.left[6] = {
	  DiffModified = {
	    provider = 'DiffModified',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = ' ? ',
	    highlight = {colors.blue,colors.bg},
	  }
	}
	gls.left[7] = {
	  DiffRemove = {
	    provider = 'DiffRemove',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = ' ? ',
	    highlight = {colors.red,colors.bg},
	  }
	}
	gls.left[8] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.purple,colors.bg}
	  }
	}
	gls.left[9] = {
	  DiagnosticError = {
	    provider = 'DiagnosticError',
	    icon = ' ? ',
	    highlight = {colors.red,colors.bg}
	  }
	}
	gls.left[10] = {
	  Space = {
	    provider = function () return '' end
	  }
	}
	gls.left[11] = {
	  DiagnosticWarn = {
	    provider = 'DiagnosticWarn',
	    icon = ' ? ',
	    highlight = {colors.yellow,colors.bg},
	  }
	}
	gls.left[12] = {
	  DiagnosticHint = {
	    provider = 'DiagnosticHint',
	    icon = '  ? ',
	    highlight = {colors.blue,colors.bg},
	  }
	}
	gls.left[13] = {
	  DiagnosticInfo = {
	    provider = 'DiagnosticInfo',
	    icon = '  ? ',
	    highlight = {colors.orange,colors.bg},
	  }
	}
	gls.right[1]= {
	  FileFormat = {
	    provider = 'FileFormat',
	    separator = ' ',
	    separator_highlight = {colors.bg,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
	gls.right[2] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    separator = ' | ',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  },
	}
	gls.right[3] = {
	  PerCent = {
	    provider = 'LinePercent',
	    separator = ' |',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
	gls.right[4] = {
	  ScrollBar = {
	    provider = 'ScrollBar',
	    highlight = {colors.yellow,colors.purple},
	  }
	}
	
	-- gls.short_line_left[1] = {
	--   BufferType = {
	--     provider = 'FileTypeName',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	
	gls.short_line_left[1] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.purple,colors.bg}
	  }
	}
	
	-- gls.short_line_right[1] = {
	--   BufferIcon = {
	--     provider= 'BufferIcon',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	-- function! s:my_bookmark_color() abort
	--   let s:scl_guibg = matchstr(execute('hi SignColumn'), 'guibg=\zs\S*')
	--   if empty(s:scl_guibg)
	--     let s:scl_guibg = 'NONE'
	--   endif
	--   exe 'hi MyBookmarkSign guifg=' . s:scl_guibg
	-- endfunction
	-- call s:my_bookmark_color() " don't remove this line!
	
	-- augroup UserGitSignColumnColor
	--   autocmd!
	--   autocmd ColorScheme * call s:my_bookmark_color()
	-- augroup END
8e5de80b5f030b3a08667d63d1e1de25|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|1|1|V|lua
	-- require'nvim-web-devicons'.setup()
	
	local gl = require('galaxyline')
	local gls = gl.section
	gl.short_line_list = {'LuaTree','vista','dbui'}
	
	local colors = {
	  bg = '#282c34',
	  yellow = '#fabd2f',
	  cyan = '#008080',
	  darkblue = '#081633',
	  green = '#608B4E',
	  orange = '#FF8800',
	  purple = '#5d4d7a',
	  magenta = '#d16d9e',
	  grey = '#c0c0c0',
	  blue = '#569CD6',
	  red = '#D16969'
	}
	
	local buffer_not_empty = function()
	  if vim.fn.empty(vim.fn.expand('%:t')) ~= 1 then
	    return true
	  end
	  return false
	end
	
	-- gls.left[1] = {
	--   FirstElement = {
	--     -- provider = function() return '▋' end,
	--     provider = function() return ' ' end,
	--     highlight = {colors.bg,colors.bg}
	--   },
	-- }
	-- gls.left[2] = {
	--   ViMode = {
	--     provider = function()
	--       local alias = {n = 'NORMAL',i = 'INSERT',c= 'COMMAND',V= 'VISUAL', [''] = 'VISUAL'}
	--       return alias[vim.fn.mode()]
	--     end,
	--     separator = ' ',
	--     separator_highlight = {colors.yellow,function()
	--       if not bffer_not_empty() then
	--         return colors.purple
	--       end
	--       return colors.purple
	--     end},
	--     highlight = {colors.grey,colors.purple,'bold'},
	--   },
	-- }
	gls.left[2] = {
	  ViMode = {
	    provider = function()
	      -- auto change color according the vim mode
	      local mode_color = {n = colors.purple,
	                          i = colors.green,
	                          v = colors.blue,
	                          [''] = colors.blue,
	                          V = colors.blue,
	                          c = colors.purple,
	                          no = colors.magenta,
	                          s = colors.orange,
	                          S = colors.orange,
	                          [''] = colors.orange,
	                          ic = colors.yellow,
	                          R = colors.red,
	                          Rv = colors.red,
	                          cv = colors.red,
	                          ce=colors.red,
	                          r = colors.cyan,
	                          rm = colors.cyan,
	                          ['r?'] = colors.cyan,
	                          ['!']  = colors.red,
	                          t = colors.red}
	      vim.api.nvim_command('hi GalaxyViMode guibg='..mode_color[vim.fn.mode()])
	      return '  NVCode '
	    end,
	    separator = ' ',
	    separator_highlight = {colors.yellow,function()
	      if not buffer_not_empty() then
	        return colors.bg
	      end
	      return colors.bg
	    end},
	    highlight = {colors.grey,colors.bg,'bold'},
	  },
	}
	-- gls.left[3] ={
	--   FileIcon = {
	--     separator = ' ',
	--     provider = 'FileIcon',
	--     condition = buffer_not_empty,
	--     highlight = {require('galaxyline.provider_fileinfo').get_file_icon_color,colors.bg},
	--   },
	-- }
	-- gls.left[4] = {
	--   FileName = {
	--     provider = {'FileSize'},
	--     condition = buffer_not_empty,
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.magenta,colors.bg}
	--   }
	-- }
	
	gls.left[3] = {
	  GitIcon = {
	    provider = function() return ' ' end,
	    condition = buffer_not_empty,
	    highlight = {colors.orange,colors.bg},
	  }
	}
	gls.left[4] = {
	  GitBranch = {
	    provider = 'GitBranch',
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    condition = buffer_not_empty,
	    highlight = {colors.grey,colors.bg},
	  }
	}
	
	local checkwidth = function()
	  local squeeze_width  = vim.fn.winwidth(0) / 2
	  if squeeze_width > 40 then
	    return true
	  end
	  return false
	end
	
	gls.left[5] = {
	  DiffAdd = {
	    provider = 'DiffAdd',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = '  ',
	    highlight = {colors.green,colors.bg},
	  }
	}
	gls.left[6] = {
	  DiffModified = {
	    provider = 'DiffModified',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = '  ',
	    highlight = {colors.blue,colors.bg},
	  }
	}
	gls.left[7] = {
	  DiffRemove = {
	    provider = 'DiffRemove',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = '  ',
	    highlight = {colors.red,colors.bg},
	  }
	}
	gls.left[8] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.purple,colors.bg}
	  }
	}
	gls.left[9] = {
	  DiagnosticError = {
	    provider = 'DiagnosticError',
	    icon = '  ',
	    highlight = {colors.red,colors.bg}
	  }
	}
	gls.left[10] = {
	  Space = {
	    provider = function () return '' end
	  }
	}
	gls.left[11] = {
	  DiagnosticWarn = {
	    provider = 'DiagnosticWarn',
	    icon = '  ',
	    highlight = {colors.yellow,colors.bg},
	  }
	}
	gls.left[12] = {
	  DiagnosticHint = {
	    provider = 'DiagnosticHint',
	    icon = '   ',
	    highlight = {colors.blue,colors.bg},
	  }
	}
	gls.left[13] = {
	  DiagnosticInfo = {
	    provider = 'DiagnosticInfo',
	    icon = '   ',
	    highlight = {colors.orange,colors.bg},
	  }
	}
	gls.right[1]= {
	  FileFormat = {
	    provider = 'FileFormat',
	    separator = ' ',
	    separator_highlight = {colors.bg,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
	gls.right[2] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    separator = ' | ',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  },
	}
	gls.right[3] = {
	  PerCent = {
	    provider = 'LinePercent',
	    separator = ' |',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
	gls.right[4] = {
	  ScrollBar = {
	    provider = 'ScrollBar',
	    highlight = {colors.yellow,colors.purple},
	  }
	}
	
	-- gls.short_line_left[1] = {
	--   BufferType = {
	--     provider = 'FileTypeName',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	
	gls.short_line_left[1] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.purple,colors.bg}
	  }
	}
	
	-- gls.short_line_right[1] = {
	--   BufferIcon = {
	--     provider= 'BufferIcon',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	-- function! s:my_bookmark_color() abort
	--   let s:scl_guibg = matchstr(execute('hi SignColumn'), 'guibg=\zs\S*')
	--   if empty(s:scl_guibg)
	--     let s:scl_guibg = 'NONE'
	--   endif
	--   exe 'hi MyBookmarkSign guifg=' . s:scl_guibg
	-- endfunction
	-- call s:my_bookmark_color() " don't remove this line!
	
	-- augroup UserGitSignColumnColor
	--   autocmd!
	--   autocmd ColorScheme * call s:my_bookmark_color()
	-- augroup ENDu
e34db09629a2bcec5602b4b20281aa20|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|76|17|v|lua
	NVCode
90b0429e960557227f474e9e6a835935|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|8|10|v|lua
	282c34
70ba371a7dfacadb642916d26156fc70|file:///Users/louis/Dev/Projects/komi/komi-client/server/index.ts|37|1|V|typescript
	    server.listen(port);
0829ea6734059d66e6bf87096b215dc1|file:///Users/louis/.alacritty.yml|63|17|v|yaml
	Fullscreen
9bac6483dc1a3a1f92aa6c28b02ea67e|file:///Users/louis/.yabairc|10|48|V|sh
	yabai -m config window_opacity_duration      0.3
d9c6046706f8d68dd426b18308c8d602|file:///Users/louis/.spacebarrc|6|52|v|sh
	"globe"
015f28b9df1bdd36427dd976fb73b29d|file:///Users/louis/.spacebarrc|6|64|v|sh
	fire
053fcf3bf4e62c5fb88d4e1a71c1c996|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/_app/index.tsx|50|14|V|typescriptreact
	        <Component {...pageProps} />
b9d0afed286c45e11d581a283fcdf28e|file:///Users/louis/Dev/Projects/komi/komi-client/src/pages/_app/index.tsx|47|9|V|typescriptreact
	      </Head>
054cac3912d6133cef31e4cb764cbe9b|file:///Users/louis/.config/nvim/init.vim|14|7|v|vim
	Iron-E/nvim-highlite
fc8c8fe84c14d7a6ffb8684c8cc1630d|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|5|1|V|lua
	local gl = require('galaxyline')
	local gls = gl.section
	gl.short_line_list = {'LuaTree','vista','dbui'}
	
	local colors = {
	  bg = '#0000',
	  yellow = '#fabd2f',
	  cyan = '#008080',
	  darkblue = '#081633',
	  green = '#608B4E',
	  orange = '#FF8800',
	  purple = '#5d4d7a',
	  magenta = '#d16d9e',
	  grey = '#c0c0c0',
	  blue = '#569CD6',
	  red = '#D16969'
	}
	
	local buffer_not_empty = function()
	  if vim.fn.empty(vim.fn.expand('%:t')) ~= 1 then
	    return true
	  end
	  return false
	end
	
	-- gls.left[1] = {
	--   FirstElement = {
	--     -- provider = function() return '▋' end,
	--     provider = function() return ' ' end,
	--     highlight = {colors.bg,colors.bg}
	--   },
	-- }
	-- gls.left[2] = {
	--   ViMode = {
	--     provider = function()
	--       local alias = {n = 'NORMAL',i = 'INSERT',c= 'COMMAND',V= 'VISUAL', [''] = 'VISUAL'}
	--       return alias[vim.fn.mode()]
	--     end,
	--     separator = ' ',
	--     separator_highlight = {colors.yellow,function()
	--       if not bffer_not_empty() then
	--         return colors.purple
	--       end
	--       return colors.purple
	--     end},
	--     highlight = {colors.grey,colors.purple,'bold'},
	--   },
	-- }
	gls.left[2] = {
	  ViMode = {
	    provider = function()
	      -- auto change color according the vim mode
	      local mode_color = {n = colors.purple,
	                          i = colors.green,
	                          v = colors.blue,
	                          [''] = colors.blue,
	                          V = colors.blue,
	                          c = colors.purple,
	                          no = colors.magenta,
	                          s = colors.orange,
	                          S = colors.orange,
	                          [''] = colors.orange,
	                          ic = colors.yellow,
	                          R = colors.red,
	                          Rv = colors.red,
	                          cv = colors.red,
	                          ce=colors.red,
	                          r = colors.cyan,
	                          rm = colors.cyan,
	                          ['r?'] = colors.cyan,
	                          ['!']  = colors.red,
	                          t = colors.red}
	      vim.api.nvim_command('hi GalaxyViMode guibg='..mode_color[vim.fn.mode()])
	      return '  Louis '
	    end,
	    separator = ' ',
	    separator_highlight = {colors.yellow,function()
	      if not buffer_not_empty() then
	        return colors.bg
	      end
	      return colors.bg
	    end},
	    highlight = {colors.grey,colors.bg,'bold'},
	  },
	}
	-- gls.left[3] ={
	--   FileIcon = {
	--     separator = ' ',
	--     provider = 'FileIcon',
	--     condition = buffer_not_empty,
	--     highlight = {require('galaxyline.provider_fileinfo').get_file_icon_color,colors.bg},
	--   },
	-- }
	-- gls.left[4] = {
	--   FileName = {
	--     provider = {'FileSize'},
	--     condition = buffer_not_empty,
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.magenta,colors.bg}
	--   }
	-- }
	
	gls.left[3] = {
	  GitIcon = {
	    provider = function() return ' ' end,
	    condition = buffer_not_empty,
	    highlight = {colors.orange,colors.bg},
	  }
	}
	gls.left[4] = {
	  GitBranch = {
	    provider = 'GitBranch',
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    condition = buffer_not_empty,
	    highlight = {colors.grey,colors.bg},
	  }
	}
	
	local checkwidth = function()
	  local squeeze_width  = vim.fn.winwidth(0) / 2
	  if squeeze_width > 40 then
	    return true
	  end
	  return false
	end
	
	gls.left[5] = {
	  DiffAdd = {
	    provider = 'DiffAdd',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = '  ',
	    highlight = {colors.green,colors.bg},
	  }
	}
	gls.left[6] = {
	  DiffModified = {
	    provider = 'DiffModified',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = '  ',
	    highlight = {colors.blue,colors.bg},
	  }
	}
	gls.left[7] = {
	  DiffRemove = {
	    provider = 'DiffRemove',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = '  ',
	    highlight = {colors.red,colors.bg},
	  }
	}
	gls.left[8] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.purple,colors.bg}
	  }
	}
	gls.left[9] = {
	  DiagnosticError = {
	    provider = 'DiagnosticError',
	    icon = '  ',
	    highlight = {colors.red,colors.bg}
	  }
	}
	gls.left[10] = {
	  Space = {
	    provider = function () return '' end
	  }
	}
	gls.left[11] = {
	  DiagnosticWarn = {
	    provider = 'DiagnosticWarn',
	    icon = '  ',
	    highlight = {colors.yellow,colors.bg},
	  }
	}
	gls.left[12] = {
	  DiagnosticHint = {
	    provider = 'DiagnosticHint',
	    icon = '   ',
	    highlight = {colors.blue,colors.bg},
	  }
	}
	gls.left[13] = {
	  DiagnosticInfo = {
	    provider = 'DiagnosticInfo',
	    icon = '   ',
	    highlight = {colors.orange,colors.bg},
	  }
	}
	gls.right[1]= {
	  FileFormat = {
	    provider = 'FileFormat',
	    separator = ' ',
	    separator_highlight = {colors.bg,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
	gls.right[2] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    separator = ' | ',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  },
	}
	gls.right[3] = {
	  PerCent = {
	    provider = 'LinePercent',
	    separator = ' |',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
	gls.right[4] = {
	  ScrollBar = {
	    provider = 'ScrollBar',
	    highlight = {colors.yellow,colors.purple},
	  }
	}
	
	-- gls.short_line_left[1] = {
	--   BufferType = {
	--     provider = 'FileTypeName',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	
	gls.short_line_left[1] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.purple,colors.bg}
	  }
	}
	
	-- gls.short_line_right[1] = {
	--   BufferIcon = {
	--     provider= 'BufferIcon',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	-- function! s:my_bookmark_color() abort
	--   let s:scl_guibg = matchstr(execute('hi SignColumn'), 'guibg=\zs\S*')
	--   if empty(s:scl_guibg)
	--     let s:scl_guibg = 'NONE'
	--   endif
	--   exe 'hi MyBookmarkSign guifg=' . s:scl_guibg
	-- endfunction
	-- call s:my_bookmark_color() " don't remove this line!
	
	-- augroup UserGitSignColumnColor
	--   autocmd!
	--   autocmd ColorScheme * call s:my_bookmark_color()
	-- augroup END
3aa0453533bd24961e97d1d3ed8ce61c|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|49|14|V|lua
	--[[
		/*
		 * IMPORTS
		 */
	--]]
	
	local vim  = vim
	local mode = vim.fn.mode
	local galaxyline = require('galaxyline')
	local section = galaxyline.section
	
	--[[
		/*
		 * CONSTANTS
		 */
	--]]
	
	-- Defined in https://github.com/Iron-E/nvim-highlite
	local _COLORS =
	{
		black = {'#202020', 0,   'black'},
		gray  = {'#808080', 244, 'gray'},
		gray_dark   = {'#353535', 236, 'darkgrey'},
		gray_darker = {'#505050', 244, 'gray'},
		gray_light  = {'#c0c0c0', 251, 'gray'},
		white       = {'#ffffff', 15,  'white'},
	
		tan = {'#f4c069', 180, 'darkyellow'},
	
		red = {'#ee4a59', 196, 'red'},
		red_dark  = {'#a80000', 124, 'darkred'},
		red_light = {'#ff4090', 203, 'red'},
	
		orange = {'#ff8900', 208, 'darkyellow'},
		orange_light = {'#f0af00', 214, 'yellow'},
	
		yellow = {'#f0df33', 220, 'yellow'},
	
		green = {'#77ff00', 72, 'green'},
		green_dark  = {'#35de60', 83, 'darkgreen'},
		green_light = {'#a0ff70', 72, 'green'},
	
		blue = {'#7090ff', 63, 'darkblue'},
		cyan = {'#33efff', 87, 'cyan'},
		ice  = {'#49a0f0', 63, 'cyan'},
		teal = {'#00d0c0', 38, 'cyan'},
		turqoise = {'#2bff99', 33, 'blue'},
	
		magenta = {'#cc0099', 126, 'magenta'},
		pink    = {'#ffa6ff', 162, 'magenta'},
		purple  = {'#cf55f0', 129, 'magenta'},
	
		magenta_dark = {'#bb0099', 126, 'darkmagenta'},
		pink_light   = {'#ffb7b7', 38,  'white'},
		purple_light = {'#af60af', 63,  'magenta'},
	
	}
	
	_COLORS.bar = {middle=_COLORS.gray_dark, side=_COLORS.black}
	_COLORS.text = _COLORS.gray_light
	
	-- hex color subtable
	local _HEX_COLORS = setmetatable(
		{['bar'] = setmetatable({}, {['__index'] = function(_, key) return _COLORS.bar[key] and _COLORS.bar[key][1] or nil end})},
		{['__index'] = function(_, key) local color = _COLORS[key] return color and color[1] or nil end}
	)
	
	local _MODES =
	{
		['c']  = {'COMMAND-LINE',      _COLORS.red},
		['ce'] = {'NORMAL EX',         _COLORS.red_dark},
		['cv'] = {'EX',                _COLORS.red_light},
		['i']  = {'INSERT',            _COLORS.green},
		['ic'] = {'INS-COMPLETE',      _COLORS.green_light},
		['n']  = {'NORMAL',            _COLORS.purple_light},
		['no'] = {'OPERATOR-PENDING',  _COLORS.purple},
		['r']  = {'HIT-ENTER',         _COLORS.cyan},
		['r?'] = {':CONFIRM',          _COLORS.cyan},
		['rm'] = {'--MORE',            _COLORS.cyan},
		['R']  = {'REPLACE',           _COLORS.pink},
		['Rv'] = {'VIRTUAL',           _COLORS.pink},
		['s']  = {'SELECT',            _COLORS.turqoise},
		['S']  = {'SELECT',            _COLORS.turqoise},
		[''] = {'SELECT',            _COLORS.turqoise},
		['t']  = {'TERMINAL',          _COLORS.orange},
		['v']  = {'VISUAL',            _COLORS.blue},
		['V']  = {'VISUAL LINE',       _COLORS.blue},
		[''] = {'VISUAL BLOCK',      _COLORS.blue},
		['!']  = {'SHELL',             _COLORS.yellow},
	
		-- libmodal
		['TABS']    = _COLORS.tan,
		['BUFFERS'] = _COLORS.teal,
		['TABLES']  = _COLORS.orange_light,
	}
	
	local _SEPARATORS =
	{
		left = '?',
		right = '?'
	}
	
	--[[
		/*
		 * PROVIDERS
		 */
	--]]
	
	local function all(...)
		local args = {...}
		return function()
			for _, fn in ipairs(args) do
				if not fn() then return false end
			end
			return true
		end
	end
	
	local function buffer_not_empty()
		return vim.fn.empty(vim.fn.expand('%:t')) ~= 1
	end
	
	local function checkwidth()
		return (vim.fn.winwidth(0) / 2) > 40
	end
	
	local function find_git_root()
		return require('galaxyline/provider_vcs').get_git_dir(vim.fn.expand('%:p:h'))
	end
	
	local function get_file_icon_color()
		return require('galaxyline/provider_fileinfo').get_file_icon_color()
	end
	
	local function printer(str)
		return function() return str end
	end
	
	local function negated(fn)
		return function() return not fn() end
	end
	
	local space = printer(' ')
	
	--[[
		/*
		 * GALAXYLINE CONFIG
		 */
	--]]
	
	galaxyline.short_line_list =
	{
		'dbui',
		'diff',
		'peekaboo',
		'undotree',
		'vista',
		'vista_markdown'
	}
	
	section.left =
	{
		{ViMode = {
			provider = function() -- auto change color according the vim mode
				local mode_color = nil
				local mode_name = nil
	
				if vim.g.libmodalActiveModeName then
					mode_name = vim.g.libmodalActiveModeName
					mode_color = _MODES[mode_name]
				else
					local current_mode = _MODES[mode(true)] or _MODES[mode(false)]
	
					mode_name = current_mode[1]
					mode_color = current_mode[2]
				end
	
				require('highlite').highlight('GalaxyViMode', {fg=mode_color, style='bold'})
	
				return mode_name..' '
			end,
			icon = '? ',
			highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
			separator = _SEPARATORS.right,
			separator_highlight = {_HEX_COLORS.bar.side, get_file_icon_color}
		}},
	
		{FileIcon = {
			provider  = {space, 'FileIcon'},
			highlight = {_HEX_COLORS.bar.side, get_file_icon_color},
			separator = _SEPARATORS.left,
			separator_highlight = {_HEX_COLORS.bar.side, get_file_icon_color}
		}},
	
		{FileName = {
			provider  = {space, 'FileName', 'FileSize'},
			condition = buffer_not_empty,
			highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side, 'bold'}
		}},
	
		{GitSeparator = {
			provider = printer(_SEPARATORS.right),
			condition = find_git_root,
			highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.green_dark},
		}},
	
		{GitBranch = {
			provider = 'GitBranch',
			icon = '  ? ',
			condition = find_git_root,
			highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.green_dark, 'bold'},
			separator = _SEPARATORS.left,
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.green_dark},
		}},
	
		{LeftEnd = {
			provider = printer(_SEPARATORS.left),
			condition = negated(find_git_root),
			highlight = {_HEX_COLORS.bar.middle, find_git_root() and _HEX_COLORS.green_dark or _HEX_COLORS.bar.side}
		}},
	
		{DiffAdd = {
			provider = 'DiffAdd',
			condition = all(checkwidth, find_git_root),
			icon = '+',
			highlight = {_HEX_COLORS.green_light, _HEX_COLORS.bar.middle},
		}},
	
		{DiffModified = {
			provider = 'DiffModified',
			condition = checkwidth,
			icon = '~',
			highlight = {_HEX_COLORS.orange_light, _HEX_COLORS.bar.middle},
		}},
	
		{DiffRemove = {
			provider = 'DiffRemove',
			condition = checkwidth,
			icon = '-',
			highlight = {_HEX_COLORS.red_light, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticError = {
			provider = 'DiagnosticError',
			icon = '? ',
			highlight = {_HEX_COLORS.red, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticWarn = {
			provider = 'DiagnosticWarn',
			icon = '?? ',
			highlight = {_HEX_COLORS.yellow, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticHint = {
			provider = 'DiagnosticHint',
			icon = '??',
			highlight = {_HEX_COLORS.magenta, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticInfo = {
			provider = 'DiagnosticInfo',
			icon = '? ',
			highlight = {_HEX_COLORS.white, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	} -- section.left
	
	section.right =
	{
		{Vista = {
			provider = 'VistaPlugin',
			condition = function() return vim.fn.exists(':Vista') ~= 0 end,
			highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.middle},
		}},
	
		{RightBegin = {
			provider = space,
			highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.side},
			separator = _SEPARATORS.right,
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.side}
		}},
	
		{FileFormat = {
			provider = {'FileFormat', space},
			highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side},
		}},
	
		{FileType = {
			provider = 'FileTypeName',
			highlight = {_HEX_COLORS.black, get_file_icon_color, 'bold'},
			separator = _SEPARATORS.left,
			separator_highlight = {get_file_icon_color, _HEX_COLORS.bar.side},
		}},
	
		{FileSep = {
			provider = printer(_SEPARATORS.right),
			highlight = {get_file_icon_color, _HEX_COLORS.bar.side},
		}},
	
		{
			LineNumber =
			{
				provider = function() return vim.fn.line('.') end,
				icon = '? ',
				condition = buffer_not_empty,
				highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side},
				separator = ' ',
				separator_highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
			},
			ColumnNumber =
			{
				provider = function() return vim.fn.col('.') end,
				icon = '? ',
				condition = buffer_not_empty,
				highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side},
				separator = ' ',
				separator_highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
			}
		},
	
		{PerCentSeparator = {
			provider = printer(_SEPARATORS.left),
			highlight = {_HEX_COLORS.magenta_dark, _HEX_COLORS.bar.side},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
		}},
	
		{PerCent = {
			provider = 'LinePercent',
			highlight = {_HEX_COLORS.white, _HEX_COLORS.magenta_dark},
		}},
	
		{ScrollBar = {
			provider = 'ScrollBar',
			highlight = {_HEX_COLORS.gray, _HEX_COLORS.magenta_dark},
		}}
	} -- section.right
	
	section.short_line_left =
	{
		{BufferType = {
			provider = {space, space, 'FileTypeName', space},
			highlight = {_HEX_COLORS.black, _HEX_COLORS.purple, 'bold'},
			separator = _SEPARATORS.right,
			separator_highlight = {_HEX_COLORS.purple, _HEX_COLORS.bar.middle}
		}}
	}
	
	section.short_line_right =
	{
		{BufferIcon = {
			provider = 'BufferIcon',
			highlight = {_HEX_COLORS.black, _HEX_COLORS.purple, 'bold'},
			separator = _SEPARATORS.left,
			separator_highlight = {_HEX_COLORS.purple, _HEX_COLORS.bar.middle}
		}}
	}
24c2f3918d864195a126a7d6b0cd9448|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|79|4|V|lua
	--[[
		/*
		 * IMPORTS
		 */
	--]]
	
	local vim  = vim
	local mode = vim.fn.mode
	local galaxyline = require('galaxyline')
	local section = galaxyline.section
	
	--[[
		/*
		 * CONSTANTS
		 */
	--]]
	
	-- Defined in https://github.com/Iron-E/nvim-highlite
	local _COLORS =
	{
		black = {'#202020', 0,   'black'},
		gray  = {'#808080', 244, 'gray'},
		gray_dark   = {'#353535', 236, 'darkgrey'},
		gray_darker = {'#505050', 244, 'gray'},
		gray_light  = {'#c0c0c0', 251, 'gray'},
		white       = {'#ffffff', 15,  'white'},
	
		tan = {'#f4c069', 180, 'darkyellow'},
	
		red = {'#ee4a59', 196, 'red'},
		red_dark  = {'#a80000', 124, 'darkred'},
		red_light = {'#ff4090', 203, 'red'},
	
		orange = {'#ff8900', 208, 'darkyellow'},
		orange_light = {'#f0af00', 214, 'yellow'},
	
		yellow = {'#f0df33', 220, 'yellow'},
	
		green = {'#77ff00', 72, 'green'},
		green_dark  = {'#35de60', 83, 'darkgreen'},
		green_light = {'#a0ff70', 72, 'green'},
	
		blue = {'#7090ff', 63, 'darkblue'},
		cyan = {'#33efff', 87, 'cyan'},
		ice  = {'#49a0f0', 63, 'cyan'},
		teal = {'#000c0', 38, 'cyan'},
		turqoise = {'#2bff99', 33, 'blue'},
	
		magenta = {'#cc0099', 126, 'magenta'},
		pink    = {'#ffa6ff', 162, 'magenta'},
		purple  = {'#cf55f0', 129, 'magenta'},
	
		magenta_dark = {'#bb0099', 126, 'darkmagenta'},
		pink_light   = {'#ffb7b7', 38,  'white'},
		purple_light = {'#af60af', 63,  'magenta'},
	
	}
	
	_COLORS.bar = {middle=_COLORS.gray_dark, side=_COLORS.black}
	_COLORS.text = _COLORS.gray_light
	
	-- hex color subtable
	local _HEX_COLORS = setmetatable(
		{['bar'] = setmetatable({}, {['__index'] = function(_, key) return _COLORS.bar[key] and _COLORS.bar[key][1] or nil end})},
		{['__index'] = function(_, key) local color = _COLORS[key] return color and color[1] or nil end}
	)
	
	local _MODES =
	{
		['c']  = {'COMMAND-LINE',      _COLORS.red},
		['ce'] = {'NORMAL EX',         _COLORS.red_dark},
		['cv'] = {'EX',                _COLORS.red_light},
		['i']  = {'INSERT',            _COLORS.green},
		['ic'] = {'INS-COMPLETE',      _COLORS.green_light},
		['n']  = {'NORMAL',            _COLORS.purple_light},
		['no'] = {'OPERATOR-PENDING',  _COLORS.purple},
		['r']  = {'HIT-ENTER',         _COLORS.cyan},
		['r?'] = {':CONFIRM',          _COLORS.cyan},
		['rm'] = {'--MORE',            _COLORS.cyan},
		['R']  = {'REPLACE',           _COLORS.pink},
		['Rv'] = {'VIRTUAL',           _COLORS.pink},
		['s']  = {'SELECT',            _COLORS.turqoise},
		['S']  = {'SELECT',            _COLORS.turqoise},
		[''] = {'SELECT',            _COLORS.turqoise},
		['t']  = {'TERMINAL',          _COLORS.orange},
		['v']  = {'VISUAL',            _COLORS.blue},
		['V']  = {'VISUAL LINE',       _COLORS.blue},
		[''] = {'VISUAL BLOCK',      _COLORS.blue},
		['!']  = {'SHELL',             _COLORS.yellow},
	
		-- libmodal
		['TABS']    = _COLORS.tan,
		['BUFFERS'] = _COLORS.teal,
		['TABLES']  = _COLORS.orange_light,
	}
	
	local _SEPARATORS =
	{
		left = '',
		right = ''
	}
	
	--[[
		/*
		 * PROVIDERS
		 */
	--]]
	
	local function all(...)
		local args = {...}
		return function()
			for _, fn in ipairs(args) do
				if not fn() then return false end
			end
			return true
		end
	end
	
	local function buffer_not_empty()
		return vim.fn.empty(vim.fn.expand('%:t')) ~= 1
	end
	
	local function checkwidth()
		return (vim.fn.winwidth(0) / 2) > 40
	end
	
	local function find_git_root()
		return require('galaxyline/provider_vcs').get_git_dir(vim.fn.expand('%:p:h'))
	end
	
	local function get_file_icon_color()
		return require('galaxyline/provider_fileinfo').get_file_icon_color()
	end
	
	local function printer(str)
		return function() return str end
	end
	
	local function negated(fn)
		return function() return not fn() end
	end
	
	local space = printer(' ')
	
	--[[
		/*
		 * GALAXYLINE CONFIG
		 */
	--]]
	
	galaxyline.short_line_list =
	{
		'dbui',
		'diff',
		'peekaboo',
		'undotree',
		'vista',
		'vista_markdown'
	}
	
	section.left =
	{
		{ViMode = {
			provider = function() -- auto change color according the vim mode
				local mode_color = nil
				local mode_name = nil
	
				if vim.g.libmodalActiveModeName then
					mode_name = vim.g.libmodalActiveModeName
					mode_color = _MODES[mode_name]
				else
					local current_mode = _MODES[mode(true)] or _MODES[mode(false)]
	
					mode_name = current_mode[1]
					mode_color = current_mode[2]
				end
	
				require('highlite').highlight('GalaxyViMode', {fg=mode_color, style='bold'})
	
				return mode_name..' '
			end,
			icon = '▊ ',
			highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
			separator = _SEPARATORS.right,
			separator_highlight = {_HEX_COLORS.bar.side, get_file_icon_color}
		}},
	
		{FileIcon = {
			provider  = {space, 'FileIcon'},
			highlight = {_HEX_COLORS.bar.side, get_file_icon_color},
			separator = _SEPARATORS.left,
			separator_highlight = {_HEX_COLORS.bar.side, get_file_icon_color}
		}},
	
		{FileName = {
			provider  = {space, 'FileName', 'FileSize'},
			condition = buffer_not_empty,
			highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side, 'bold'}
		}},
	
		{GitSeparator = {
			provider = printer(_SEPARATORS.right),
			condition = find_git_root,
			highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.green_dark},
		}},
	
		{GitBranch = {
			provider = 'GitBranch',
			icon = '   ',
			condition = find_git_root,
			highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.green_dark, 'bold'},
			separator = _SEPARATORS.left,
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.green_dark},
		}},
	
		{LeftEnd = {
			provider = printer(_SEPARATORS.left),
			condition = negated(find_git_root),
			highlight = {_HEX_COLORS.bar.middle, find_git_root() and _HEX_COLORS.green_dark or _HEX_COLORS.bar.side}
		}},
	
		{DiffAdd = {
			provider = 'DiffAdd',
			condition = all(checkwidth, find_git_root),
			icon = '+',
			highlight = {_HEX_COLORS.green_light, _HEX_COLORS.bar.middle},
		}},
	
		{DiffModified = {
			provider = 'DiffModified',
			condition = checkwidth,
			icon = '~',
			highlight = {_HEX_COLORS.orange_light, _HEX_COLORS.bar.middle},
		}},
	
		{DiffRemove = {
			provider = 'DiffRemove',
			condition = checkwidth,
			icon = '-',
			highlight = {_HEX_COLORS.red_light, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticError = {
			provider = 'DiagnosticError',
			icon = 'Ⓧ ',
			highlight = {_HEX_COLORS.red, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticWarn = {
			provider = 'DiagnosticWarn',
			icon = '⚠️ ',
			highlight = {_HEX_COLORS.yellow, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticHint = {
			provider = 'DiagnosticHint',
			icon = '💡',
			highlight = {_HEX_COLORS.magenta, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticInfo = {
			provider = 'DiagnosticInfo',
			icon = 'ⓘ ',
			highlight = {_HEX_COLORS.white, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	} -- section.left
	
	section.right =
	{
		{Vista = {
			provider = 'VistaPlugin',
			condition = function() return vim.fn.exists(':Vista') ~= 0 end,
			highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.middle},
		}},
	
		{RightBegin = {
			provider = space,
			highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.side},
			separator = _SEPARATORS.right,
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.side}
		}},
	
		{FileFormat = {
			provider = {'FileFormat', space},
			highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side},
		}},
	
		{FileType = {
			provider = 'FileTypeName',
			highlight = {_HEX_COLORS.black, get_file_icon_color, 'bold'},
			separator = _SEPARATORS.left,
			separator_highlight = {get_file_icon_color, _HEX_COLORS.bar.side},
		}},
	
		{FileSep = {
			provider = printer(_SEPARATORS.right),
			highlight = {get_file_icon_color, _HEX_COLORS.bar.side},
		}},
	
		{
			LineNumber =
			{
				provider = function() return vim.fn.line('.') end,
				icon = ' ',
				condition = buffer_not_empty,
				highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side},
				separator = ' ',
				separator_highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
			},
			ColumnNumber =
			{
				provider = function() return vim.fn.col('.') end,
				icon = ' ',
				condition = buffer_not_empty,
				highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side},
				separator = ' ',
				separator_highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
			}
		},
	
		{PerCentSeparator = {
			provider = printer(_SEPARATORS.left),
			highlight = {_HEX_COLORS.magenta_dark, _HEX_COLORS.bar.side},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
		}},
	
		{PerCent = {
			provider = 'LinePercent',
			highlight = {_HEX_COLORS.white, _HEX_COLORS.magenta_dark},
		}},
	
		{ScrollBar = {
			provider = 'ScrollBar',
			highlight = {_HEX_COLORS.gray, _HEX_COLORS.magenta_dark},
		}}
	} -- section.right
	
	section.short_line_left =
	{
		{BufferType = {
			provider = {space, space, 'FileTypeName', space},
			highlight = {_HEX_COLORS.black, _HEX_COLORS.purple, 'bold'},
			separator = _SEPARATORS.right,
			separator_highlight = {_HEX_COLORS.purple, _HEX_COLORS.bar.middle}
		}}
	}
	
	section.short_line_right =
	{
		{BufferIcon = {
			provider = 'BufferIcon',
			highlight = {_HEX_COLORS.black, _HEX_COLORS.purple, 'bold'},
			separator = _SEPARATORS.left,
			separator_highlight = {_HEX_COLORS.purple, _HEX_COLORS.bar.middle}
		}}
	}
544ee6ae285f5b19e5a4fdfb9aee9e9b|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|1|31|V|lua
	-- require'nvim-web-devicons'.setup()
dbb948813a175d8e1fb501e488957b7f|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|191|13|v|lua
	   
5502c8a01edf7761fcebb2448fb3035c|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|198|13|v|lua
	   
dad3a9c29c437656394497a13795f37f|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|73|55|V|lua
	-- require'nvim-web-devicons'.setup()
	
	local gl = require('galaxyline')
	local gls = gl.section
	gl.short_line_list = {'LuaTree','vista','dbui'}
	
	local colors = {
	  bg = '#0000',
	  yellow = '#fabd2f',
	  cyan = '#008080',
	  darkblue = '#081633',
	  green = '#608B4E',
	  orange = '#FF8800',
	  purple = '#5d4d7a',
	  magenta = '#d16d9e',
	  grey = '#c0c0c0',
	  blue = '#569CD6',
	  red = '#D16969'
	}
	
	local buffer_not_empty = function()
	  if vim.fn.empty(vim.fn.expand('%:t')) ~= 1 then
	    return true
	  end
	  return false
	end
	
	-- gls.left[1] = {
	--   FirstElement = {
	--     -- provider = function() return '▋' end,
	--     provider = function() return ' ' end,
	--     highlight = {colors.bg,colors.bg}
	--   },
	-- }
	-- gls.left[2] = {
	--   ViMode = {
	--     provider = function()
	--       local alias = {n = 'NORMAL',i = 'INSERT',c= 'COMMAND',V= 'VISUAL', [''] = 'VISUAL'}
	--       return alias[vim.fn.mode()]
	--     end,
	--     separator = ' ',
	--     separator_highlight = {colors.yellow,function()
	--       if not bffer_not_empty() then
	--         return colors.purple
	--       end
	--       return colors.purple
	--     end},
	--     highlight = {colors.grey,colors.purple,'bold'},
	--   },
	-- }
	gls.left[2] = {
	  ViMode = {
	    provider = function()
	      -- auto change color according the vim mode
	      local mode_color = {n = colors.purple,
	                          i = colors.green,
	                          v = colors.blue,
	                          [''] = colors.blue,
	                          V = colors.blue,
	                          c = colors.purple,
	                          no = colors.magenta,
	                          s = colors.orange,
	                          S = colors.orange,
	                          [''] = colors.orange,
	                          ic = colors.yellow,
	                          R = colors.red,
	                          Rv = colors.red,
	                          cv = colors.red,
	                          ce=colors.red,
	                          r = colors.cyan,
	                          rm = colors.cyan,
	                          ['r?'] = colors.cyan,
	                          ['!']  = colors.red,
	                          t = colors.red}
	      vim.api.nvim_command('hi GalaxyViMode guibg='..mode_color[vim.fn.mode()])
	      return '  Louis '
	    end,
	    separator = ' ',
	    separator_highlight = {colors.yellow,function()
	      if not buffer_not_empty() then
	        return colors.bg
	      end
	      return colors.bg
	    end},
	    highlight = {colors.grey,colors.bg,'bold'},
	  },
	}
	-- gls.left[3] ={
	--   FileIcon = {
	--     separator = ' ',
	--     provider = 'FileIcon',
	--     condition = buffer_not_empty,
	--     highlight = {require('galaxyline.provider_fileinfo').get_file_icon_color,colors.bg},
	--   },
	-- }
	-- gls.left[4] = {
	--   FileName = {
	--     provider = {'FileSize'},
	--     condition = buffer_not_empty,
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.magenta,colors.bg}
	--   }
	-- }
	
	gls.left[3] = {
	  GitIcon = {
	    provider = function() return ' ' end,
	    condition = buffer_not_empty,
	    highlight = {colors.orange,colors.bg},
	  }
	}
	gls.left[4] = {
	  GitBranch = {
	    provider = 'GitBranch',
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    condition = buffer_not_empty,
	    highlight = {colors.grey,colors.bg},
	  }
	}
	
	local checkwidth = function()
	  local squeeze_width  = vim.fn.winwidth(0) / 2
	  if squeeze_width > 40 then
	    return true
	  end
	  return false
	end
	
	gls.left[5] = {
	  DiffAdd = {
	    provider = 'DiffAdd',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = '  ',
	    highlight = {colors.green,colors.bg},
	  }
	}
	gls.left[6] = {
	  DiffModified = {
	    provider = 'DiffModified',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = '  ',
	    highlight = {colors.blue,colors.bg},
	  }
	}
	gls.left[7] = {
	  DiffRemove = {
	    provider = 'DiffRemove',
	    condition = checkwidth,
	    -- separator = ' ',
	    -- separator_highlight = {colors.purple,colors.bg},
	    icon = '  ',
	    highlight = {colors.red,colors.bg},
	  }
	}
	gls.left[8] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.purple,colors.bg}
	  }
	}
	gls.left[9] = {
	  DiagnosticError = {
	    provider = 'DiagnosticError',
	    icon = ' Ⓧ ',
	    highlight = {colors.red,colors.bg}
	  }
	}
	gls.left[10] = {
	  Space = {
	    provider = function () return '' end
	  }
	}
	gls.left[11] = {
	  DiagnosticWarn = {
	    provider = 'DiagnosticWarn',
	    icon = '⚠️ ',
	    highlight = {colors.yellow,colors.bg},
	  }
	}
	gls.left[12] = {
	  DiagnosticHint = {
	    provider = 'DiagnosticHint',
	    icon = '💡',
	    highlight = {colors.blue,colors.bg},
	  }
	}
	gls.left[13] = {
	  DiagnosticInfo = {
	    provider = 'DiagnosticInfo',
	    icon = 'ⓘ ',
	    highlight = {colors.orange,colors.bg},
	  }
	}
	gls.right[1]= {
	  FileFormat = {
	    provider = 'FileFormat',
	    separator = ' ',
	    separator_highlight = {colors.bg,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
	gls.right[2] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    separator = ' | ',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  },
	}
	gls.right[3] = {
	  PerCent = {
	    provider = 'LinePercent',
	    separator = ' |',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
	gls.right[4] = {
	  ScrollBar = {
	    provider = 'ScrollBar',
	    highlight = {colors.yellow,colors.purple},
	  }
	}
	
	-- gls.short_line_left[1] = {
	--   BufferType = {
	--     provider = 'FileTypeName',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	
	gls.short_line_left[1] = {
	  LeftEnd = {
	    provider = function() return ' ' end,
	    separator = ' ',
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.purple,colors.bg}
	  }
	}
	
	-- gls.short_line_right[1] = {
	--   BufferIcon = {
	--     provider= 'BufferIcon',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	-- function! s:my_bookmark_color() abort
	--   let s:scl_guibg = matchstr(execute('hi SignColumn'), 'guibg=\zs\S*')
	--   if empty(s:scl_guibg)
	--     let s:scl_guibg = 'NONE'
	--   endif
	--   exe 'hi MyBookmarkSign guifg=' . s:scl_guibg
	-- endfunction
	-- call s:my_bookmark_color() " don't remove this line!
	
	-- augroup UserGitSignColumnColor
	--   autocmd!
	--   autocmd ColorScheme * call s:my_bookmark_color()
	-- augroup END
2e5d605913027f385621f7515ee31e7c|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|18|1|V|lua
				require('highlite').highlight('GalaxyViMode', {fg=mode_color, style='bold'})
53dde3d02d4449e483a588e22c141f6f|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|171|29|V|lua
	ection.left =
	{
		{ViMode = {
			provider = function() -- auto change color according the vim mode
				local mode_color = nil
				local mode_name = nil
	
				if vim.g.libmodalActiveModeName then
					mode_name = vim.g.libmodalActiveModeName
					mode_color = _MODES[mode_name]
				else
					local current_mode = _MODES[mode(true)] or _MODES[mode(false)]
	
					mode_name = current_mode[1]
					mode_color = current_mode[2]
				end
	
				return mode_name..' '
			end,
			icon = '▊ ',
			highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
			separator = _SEPARATORS.right,
			separator_highlight = {_HEX_COLORS.bar.side, get_file_icon_color}
		}},
	
		{FileIcon = {
			provider  = {space, 'FileIcon'},
			highlight = {_HEX_COLORS.bar.side, get_file_icon_color},
			separator = _SEPARATORS.left,
			separator_highlight = {_HEX_COLORS.bar.side, get_file_icon_color}
		}},
	
		{FileName = {
			provider  = {space, 'FileName', 'FileSize'},
			condition = buffer_no_empty,
			highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side, 'bold'}
		}},
	
		{GitSeparator = {
			provider = printer(_SEPARATORS.right),
			condition = find_git_root,
			highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.green_dark},
		}},
	
		{GitBranch = {
			provider = 'GitBranch',
			icon = '   ',
			condition = find_git_root,
			highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.green_dark, 'bold'},
			separator = _SEPARATORS.left,
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.green_dark},
		}},
	
		{LeftEnd = {
			provider = printer(_SEPARATORS.left),
			condition = negated(find_git_root),
			highlight = {_HEX_COLORS.bar.middle, find_git_root() and _HEX_COLORS.green_dark or _HEX_COLORS.bar.side}
		}},
	
		{DiffAdd = {
			provider = 'DiffAdd',
			condition = all(checkwidth, find_git_root),
			icon = '+',
			highlight = {_HEX_COLORS.green_light, _HEX_COLORS.bar.middle},
		}},
	
		{DiffModified = {
			provider = 'DiffModified',
			condition = checkwidth,
			icon = '~',
			highlight = {_HEX_COLORS.orange_light, _HEX_COLORS.bar.middle},
		}},
	
		{DiffRemove = {
			provider = 'DiffRemove',
			condition = checkwidth,
			icon = '-',
			highlight = {_HEX_COLORS.red_light, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticError = {
			provider = 'DiagnosticError',
			icon = 'Ⓧ ',
			highlight = {_HEX_COLORS.red, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticWarn = {
			provider = 'DiagnosticWarn',
			icon = '⚠️ ',
			highlight = {_HEX_COLORS.yellow, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticHint = {
			provider = 'DiagnosticHint',
			icon = '💡',
			highlight = {_HEX_COLORS.magenta, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	
		{DiagnosticInfo = {
			provider = 'DiagnosticInfo',
			icon = 'ⓘ ',
			highlight = {_HEX_COLORS.white, _HEX_COLORS.bar.middle},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.middle},
		}},
	} -- section.left
	
	section.right =
	{
		{Vista = {
			provider = 'VistaPlugin',
			condition = function() return vim.fn.exists(':Vista') ~= 0 end,
			highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.middle},
		}},
	
		{RightBegin = {
			provider = space,
			highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.side},
			separator = _SEPARATORS.right,
			separator_highlight = {_HEX_COLORS.bar.middle, _HEX_COLORS.bar.side}
		}},
	
		{FileFormat = {
			provider = {'FileFormat', space},
			highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side},
		}},
	
		{FileType = {
			provider = 'FileTypeName',
			highlight = {_HEX_COLORS.black, get_file_icon_color, 'bold'},
			separator = _SEPARATORS.left,
			separator_highlight = {get_file_icon_color, _HEX_COLORS.bar.side},
		}},
	
		{FileSep = {
			provider = printer(_SEPARATORS.right),
			highlight = {get_file_icon_color, _HEX_COLORS.bar.side},
		}},
	
		{
			LineNumber =
			{
				provider = function() return vim.fn.line('.') end,
				icon = ' ',
				condition = buffer_not_empty,
				highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side},
				separator = ' ',
				separator_highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
			},
			ColumnNumber =
			{
				provider = function() return vim.fn.col('.') end,
				icon = ' ',
				condition = buffer_not_empty,
				highlight = {_HEX_COLORS.text, _HEX_COLORS.bar.side},
				separator = ' ',
				separator_highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
			}
		},
	
		{PerCentSeparator = {
			provider = printer(_SEPARATORS.left),
			highlight = {_HEX_COLORS.magenta_dark, _HEX_COLORS.bar.side},
			separator = ' ',
			separator_highlight = {_HEX_COLORS.bar.side, _HEX_COLORS.bar.side},
		}},
	
		{PerCent = {
			provider = 'LinePercent',
			highlight = {_HEX_COLORS.white, _HEX_COLORS.magenta_dark},
		}},
	
		{ScrollBar = {
			provider = 'ScrollBar',
			highlight = {_HEX_COLORS.gray, _HEX_COLORS.magenta_dark},
		}}
	} -- section.right
	
	section.short_line_left =
	{
		{BufferType = {
			provider = {space, space, 'FileTypeName', space},
			highlight = {_HEX_COLORS.black, _HEX_COLORS.purple, 'bold'},
			separator = _SEPARATORS.right,
			separator_highlight = {_HEX_COLORS.purple, _HEX_COLORS.bar.middle}
		}}
	}
	
	section.short_line_right =
	{
		{BufferIcon = {
			provider = 'BufferIcon',
			highlight = {_HEX_COLORS.black, _HEX_COLORS.purple, 'bold'},
			separator = _SEPARATORS.left,
			separator_highlight = {_HEX_COLORS.purple, _HEX_COLORS.bar.middle}
		}}
	}t
fcc2c50027bfd25a32f4fe11a97390bc|file:///Users/louis/.config/nvim/init.vim|49|6|V|vim
	Plug 'wincent/scalpel'
f2b1cc3cf32231f8b5e1fb2ac5513115|file:///Users/louis/.config/nvim/init.vim|45|1|V|vim
	let python_highlight_all=1
6fc53945fcfcdb6bd305894e871def6b|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|22|12|v|lua
	8FBCBB
8f7dcc38b330ccf175a393e54aca8274|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|21|17|v|lua
	353644
ff91ed7017f320d247c9dc191e1d207e|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|23|18|v|lua
	65a380
5880a47f0d5ff6a83838a0bfaccd443b|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|311|1|V|lua
	gls.short_line_left[1] = {
	  BufferType = {
	    provider = 'FileTypeName',
	    separator = '',
	    condition = has_file_type,
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.fg,colors.purple}
	  }
	}
	
	
	gls.short_line_right[1] = {
	  BufferIcon = {
	    provider= 'BufferIcon',
	    separator = '',
	    condition = has_file_type,
	    separator_highlight = {colors.purple,colors.bg},
	    highlight = {colors.fg,colors.purple}
	  }
	}
09cf5c18cbc9c14b606cef4a6772761d|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|269|1|V|lua
	
	gls.right[1]= {
	  FileFormat = {
	    provider = 'FileFormat',
	    separator = ' ',
	    separator_highlight = {colors.bg,colors.line_bg},
	    highlight = {colors.fg,colors.line_bg,'bold'},
	  }
	}
761f0129a5cd6306c2ac300c77d4620f|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|216|1|V|lua
	gls.left[10] = {
	  LeftEnd = {
	    provider = function() return '' end,
	    separator = '',
	    separator_highlight = {colors.bg,colors.line_bg},
	    highlight = {colors.line_bg,colors.line_bg}
	  }
	}
ed04cf2b8f986800ef394c934fa02099|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|262|1|V|lua
	gls.right[1]= {
	  FileFormat = {
	    provider = 'FileFormat',
	    separator = ' ',
	    separator_highlight = {colors.bg,colors.line_bg},
	    highlight = {colors.fg,colors.line_bg,'bold'},
	  }
	}
fac0c0ef830a3cb7219eec39e0ec9eb6|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|26|13|v|lua
	#008080
7a17aa1ef3dac1b5d190d353c77b0424|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|1|1|V|lua
	local gl = require('galaxyline')
	local gls = gl.section
	local extension = require('galaxyline.provider_extensions')
	
	gl.short_line_list = {
	    'LuaTree',
	    'vista',
	    'dbui',
	    'startify',
	    'term',
	    'nerdtree',
	    'fugitive',
	    'fugitiveblame',
	    'plug'
	}
	
	-- VistaPlugin = extension.vista_nearest
	
	local colors = {
	    bg = '#0000',
	    line_bg = '#0000',
	    fg = '#0000',
	    fg_green = '#0000',
	
	    yellow = '#fabd2f',
	    cyan = '#008080',
	    darkblue = '#081633',
	    green = '#afd700',
	    orange = '#FF8800',
	    purple = '#5d4d7a',
	    magenta = '#c678dd',
	    blue = '#51afef';
	    red = '#ec5f67'
	}
	
	local function lsp_status(status)
	    shorter_stat = ''
	    for match in string.gmatch(status, "[^%s]+")  do
	        err_warn = string.find(match, "^[WE]%d+", 0)
	        if not err_warn then
	            shorter_stat = shorter_stat .. ' ' .. match
	        end
	    end
	    return shorter_stat
	end
	
	
	local function get_coc_lsp()
	  local status = vim.fn['coc#status']()
	  if not satus or status == '' then
	      return ''
	  end
	  return lsp_status(status)
	end
	
	function get_diagnostic_info()
	  if vim.fn.exists('*coc#rpc#start_server') == 1 then
	    return get_coc_lsp()
	    end
	  return ''
	end
	
	local function get_current_func()
	  local has_func, func_name = pcall(vim.fn.nvim_buf_get_var,0,'coc_current_function')
	  if not has_func then return end
	      return func_name
	  end
	
	function get_function_info()
	  if vim.fn.exists('*coc#rpc#start_server') == 1 then
	    return get_current_func()
	    end
	  return ''
	end
	
	local function trailing_whitespace()
	    local trail = vim.fn.search("\\s$", "nw")
	    if trail ~= 0 then
	        return ' '
	    else
	        return nil
	    end
	end
	
	CocStatus = get_diagnostic_info
	CocFunc = get_current_func
	TrailingWhiteSpace = trailing_whitespace
	
	function has_file_type()
	    local f_type = vim.bo.filetype
	    if not f_type or f_type == '' then
	        return false
	    end
	    return true
	end
	
	local buffer_not_empty = function()
	  if vim.fn.empty(vim.fn.expand('%:t')) ~= 1 then
	    return true
	  end
	  return false
	end
	
	gls.left[1] = {
	  FirstElement = {
	    provider = function() return ' ' end,
	    highlight = {colors.blue,colors.line_bg}
	  },
	}
	gls.left[2] = {
	  ViMode = {
	    provider = function()
	      -- auto change color according the vim mode
	      local alias = {
	          n = 'NORMAL',
	          i = 'INSERT',
	          c= 'COMMAND',
	          V= 'VISUAL',
	          [''] = 'VISUAL',
	          v ='VISUAL',
	          c  = 'COMMAND-LINE',
	          ['r?'] = ':CONFIRM',
	          rm = '--MORE',
	          R  = 'REPLACE',
	          Rv = 'VIRTUAL',
	          s  = 'SELECT',
	          S  = 'SELECT',
	          ['r']  = 'HIT-ENTER',
	          [''] = 'SELECT',
	          t  = 'TERMINAL',
	          ['!']  = 'SHELL',
	      }
	      local mode_color = {
	          n = colors.green,
	          i = colors.blue,v=colors.magenta,[''] = colors.blue,V=colors.blue,
	          c = colors.red,no = colors.magenta,s = colors.orange,S=colors.orange,
	          [''] = colors.orange,ic = colors.yellow,R = colors.purple,Rv = colors.purple,
	          cv = colors.red,ce=colors.red, r = colors.cyan,rm = colors.cyan, ['r?'] = colors.cyan,
	          ['!']  = colors.green,t = colors.green,
	          c  = colors.purple,
	          ['r?'] = colors.red,
	          ['r']  = colors.red,
	          rm = colors.red,
	          R  = colors.yellow,
	          Rv = colors.magenta,
	      }
	      local vim_mode = vim.fn.mode()
	      vim.api.nvim_command('hi GalaxyViMode guifg='..mode_color[vim_mode])
	      return alias[vim_mode] .. '   Louis  '
	    end,
	    highlight = {colors.red,colors.line_bg,'bold'},
	  },
	}
	gls.left[3] ={
	  FileIcon = {
	    provider = 'FileIcon',
	    condition = buffer_not_empty,
	    highlight = {require('galaxyline.provider_fileinfo').get_file_icon_color,colors.line_bg},
	  },
	}
	gls.left[4] = {
	  FileName = {
	    provider = {'FileName','FileSize'},
	    condition = buffer_not_empty,
	    highlight = {colors.fg,colors.line_bg,'bold'}
	  }
	}
	
	gls.left[5] = {
	  GitIcon = {
	    provider = function() return '  ' end,
	    condition = require('galaxyline.provider_vcs').check_git_workspace,
	    highlight = {colors.orange,colors.line_bg},
	  }
	}
	gls.left[6] = {
	  GitBranch = {
	    provider = 'GitBranch',
	    condition = require('galaxyline.provider_vcs').check_git_workspace,
	    highlight = {'#8FBCBB',colors.line_bg,'bold'},
	  }
	}
	
	local checkwidth = function()
	  local squeeze_width  = vim.fn.winwidth(0) / 2
	  if squeeze_width > 40 then
	    return true
	  end
	  return false
	end
	
	gls.left[7] = {
	  DiffAdd = {
	    provider = 'DiffAdd',
	    condition = checkwidth,
	    icon = ' ',
	    highlight = {colors.green,colors.line_bg},
	  }
	}
	gls.left[8] = {
	  DiffModified = {
	    provider = 'DiffModified',
	    condition = checkwidth,
	    icon = ' ',
	    highlight = {colors.orange,colors.line_bg},
	  }
	}
	gls.left[9] = {
	  DiffRemove = {
	    provider = 'DiffRemove',
	    condition = checkwidth,
	    icon = ' ',
	    highlight = {colors.red,colors.line_bg},
	  }
	}
	
	gls.left[11] = {
	    TrailingWhiteSpace = {
	     provider = TrailingWhiteSpace,
	     icon = '  ',
	     highlight = {colors.yellow,colors.bg},
	    }
	}
	
	gls.left[12] = {
	  DiagnosticError = {
	    provider = 'DiagnosticError',
	    icon = '  ',
	    highlight = {colors.red,colors.bg}
	  }
	}
	gls.left[13] = {
	  Space = {
	    provider = function () return ' ' end
	  }
	}
	gls.left[14] = {
	  DiagnosticWarn = {
	    provider = 'DiagnosticWarn',
	    icon = '  ',
	    highlight = {colors.yellow,colors.bg},
	  }
	}
	
	
	gls.left[15] = {
	    CocStatus = {
	     provider = CocStatus,
	     highlight = {colors.green,colors.bg},
	     icon = '  🗱'
	    }
	}
	
	gls.left[16] = {
	  CocFunc = {
	    provider = CocFunc,
	    icon = '  λ ',
	    highlight = {colors.yellow,colors.bg},
	  }
	}
	
	gls.right[4] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    separator = ' | ',
	    separator_highlight = {colors.blue,colors.line_bg},
	    highlight = {colors.fg,colors.line_bg},
	  },
	}
	gls.right[5] = {
	  PerCent = {
	    provider = 'LinePercent',
	    separator = ' ',
	    separator_highlight = {colors.line_bg,colors.line_bg},
	    highlight = {colors.cyan,colors.darkblue,'bold'},
	  }
	}
	
	-- gls.right[4] = {
	--   ScrollBar = {
	--     provider = 'ScrollBar',
	--     highlight = {colors.blue,colors.purple},
	--   }
	-- }
	--
	-- gls.right[3] = {
	--   Vista = {
	--     provider = VistaPlugin,
	--     separator = ' ',
	--     separator_highlight = {colors.bg,colors.line_bg},
	--     highlight = {colors.fg,colors.line_bg,'bold'},
	--   }
	-- }
5e8ace6481e11a49fe56002429412515|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|97|7|v|lua
	buffer_not_empty
bb7aedfa61007447dd6efaf9f37641e3|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|284|25|v|lua
	purple
62848e3ce5804aa985513a7922ff87b2|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|284|18|v|lua
	colors
9306d36e7037e0a9244c761921c8d60e|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|283|28|v|lua
	colors.purple,
31899f76f5c02bf53f68e6f236392675|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|288|1|V|lua
	-- gls.short_line_right[1] = {
	--   BufferIcon = {
	--     provider= 'BufferIcon',
	--     separator = ' ',
	--     separator_highlight = {colors.purple,colors.bg},
	--     highlight = {colors.grey,colors.purple}
	--   }
	-- }
	
74b87337454200d4d33f80c4663dc5e5|file:///Users/louis/Dev/Projects/komi/komi-client/src/hooks/index.ts|14|4|V|typescript
	aaaa
8ed822bb165dd5633c71862ed4ff7b30|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|1|1|V|lua
	local gl = require('galaxyline')
f6e695e24ad42d08fc397bbabc2b136d|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|1|1|V|lua
	local gl = require('galaxyline')
	local gls = gl.section
	local extension = require('galaxyline.provider_extensions')
	
	gl.short_line_list = {
	    'LuaTree',
	    'vista',
	    'dbui',
	    'startify',
	    'term',
	    'nerdtree',
	    'fugitive',
	    'fugitiveblame',
	    'plug'
	}
	
	-- VistaPlugin = extension.vista_nearest
	
	local colors = {
	    bg = '#0000',
	    line_bg = '#0000',
	    fg = '#0000',
	    fg_green = '#0000',
	
	    yellow = '#fabd2f',
	    cyan = '#008080',
	    darkblue = '#081633',
	    green = '#afd700',
	    orange = '#FF8800',
	    purple = '#5d4d7a',
	    magenta = '#c678dd',
	    blue = '#51afef';
	    red = '#ec5f67'
	}
	
	local function lsp_status(status)
	    shorter_stat = ''
	    for match in string.gmatch(status, "[^%s]+")  do
	        err_warn = string.find(match, "^[WE]%d+", 0)
	        if not err_warn then
	            shorter_stat = shorter_stat .. ' ' .. match
	        end
	    end
	    return shorter_stat
	end
	
	
	local function get_coc_lsp()
	  local status = vim.fn['coc#status']()
	  if not satus or status == '' then
	      return ''
	  end
	  return lsp_status(status)
	end
	
	function get_diagnostic_info()
	  if vim.fn.exists('*coc#rpc#start_server') == 1 then
	    return get_coc_lsp()
	    end
	  return ''
	end
	
	local function get_current_func()
	  local has_func, func_name = pcall(vim.fn.nvim_buf_get_var,0,'coc_current_function')
	  if not has_func then return end
	      return func_name
	  end
	
	function get_function_info()
	  if vim.fn.exists('*coc#rpc#start_server') == 1 then
	    return get_current_func()
	    end
	  return ''
	end
	
	local function trailing_whitespace()
	    local trail = vim.fn.search("\\s$", "nw")
	    if trail ~= 0 then
	        return ' '
	    else
	        return nil
	    end
	end
	
	CocStatus = get_diagnostic_info
	CocFunc = get_current_func
	TrailingWhiteSpace = trailing_whitespace
	
	function has_file_type()
	    local f_type = vim.bo.filetype
	    if not f_type or f_type == '' then
	        return false
	    end
	    return true
	end
	
	local buffer_not_empty = function()
	  if vim.fn.empty(vim.fn.expand('%:t')) ~= 1 then
	    return true
	  end
	  return false
	end
	
	gls.left[1] = {
	  FirstElement = {
	    provider = function() return ' ' end,
	    highlight = {colors.blue,colors.line_bg}
	  },
	}
	gls.left[2] = {
	  ViMode = {
	    provider = function()
	      -- auto change color according the vim mode
	      local alias = {
	          n = 'NORMAL',
	          i = 'INSERT',
	          c= 'COMMAND',
	          V= 'VISUAL',
	          [''] = 'VISUAL',
	          v ='VISUAL',
	          c  = 'COMMAND-LINE',
	          ['r?'] = ':CONFIRM',
	          rm = '--MORE',
	          R  = 'REPLACE',
	          Rv = 'VIRTUAL',
	          s  = 'SELECT',
	          S  = 'SELECT',
	          ['r']  = 'HIT-ENTER',
	          [''] = 'SELECT',
	          t  = 'TERMINAL',
	          ['!']  = 'SHELL',
	      }
	      local mode_color = {
	          n = colors.green,
	          i = colors.blue,v=colors.magenta,[''] = colors.blue,V=colors.blue,
	          c = colors.red,no = colors.magenta,s = colors.orange,S=colors.orange,
	          [''] = colors.orange,ic = colors.yellow,R = colors.purple,Rv = colors.purple,
	          cv = colors.red,ce=colors.red, r = colors.cyan,rm = colors.cyan, ['r?'] = colors.cyan,
	          ['!']  = colors.green,t = colors.green,
	          c  = colors.purple,
	          ['r?'] = colors.red,
	          ['r']  = colors.red,
	          rm = colors.red,
	          R  = colors.yellow,
	          Rv = colors.magenta,
	      }
	      local vim_mode = vim.fn.mode()
	      vim.api.nvim_command('hi GalaxyViMode guifg='..mode_color[vim_mode])
	      return alias[vim_mode] .. '   Louis  '
	    end,
	    separator = '',
	    separator_highlight = {colors.yellow,function()
	      if not buffer_not_empty() then
	        return colors.bg
	      end
	      return colors.bg
	    end},
	    highlight = {colors.red,colors.line_bg,'bold'},
	  },
	}
	gls.left[3] ={
	  FileIcon = {
	    provider = 'FileIcon',
	    condition = buffer_not_empty,
	    highlight = {require('galaxyline.provider_fileinfo').get_file_icon_color,colors.line_bg},
	  },
	}
	gls.left[4] = {
	  FileName = {
	    provider = {'FileName','FileSize'},
	    condition = buffer_not_empty,
	    highlight = {colors.fg,colors.line_bg,'bold'}
	  }
	}
	
	gls.left[5] = {
	  GitIcon = {
	    provider = function() return '  ' end,
	    condition = require('galaxyline.provider_vcs').check_git_workspace,
	    highlight = {colors.orange,colors.line_bg},
	  }
	}
	gls.left[6] = {
	  GitBranch = {
	    provider = 'GitBranch',
	    condition = require('galaxyline.provider_vcs').check_git_workspace,
	    highlight = {'#8FBCBB',colors.line_bg,'bold'},
	  }
	}
	
	local checkwidth = function()
	  local squeeze_width  = vim.fn.winwidth(0) / 2
	  if squeeze_width > 40 then
	    return true
	  end
	  return false
	end
	
	gls.left[7] = {
	  DiffAdd = {
	    provider = 'DiffAdd',
	    condition = checkwidth,
	    icon = ' ',
	    highlight = {colors.green,colors.line_bg},
	  }
	}
	gls.left[8] = {
	  DiffModified = {
	    provider = 'DiffModified',
	    condition = checkwidth,
	    icon = ' ',
	    highlight = {colors.orange,colors.line_bg},
	  }
	}
	gls.left[9] = {
	  DiffRemove = {
	    provider = 'DiffRemove',
	    condition = checkwidth,
	    icon = ' ',
	    highlight = {colors.red,colors.line_bg},
	  }
	}
	
	gls.left[11] = {
	    TrailingWhiteSpace = {
	     provider = TrailingWhiteSpace,
	     icon = '  ',
	     highlight = {colors.yellow,colors.bg},
	    }
	}
	
	gls.left[12] = {
	  DiagnosticError = {
	    provider = 'DiagnosticError',
	    icon = '  ',
	    highlight = {colors.red,colors.bg}
	  }
	}
	gls.left[13] = {
	  Space = {
	    provider = function () return ' ' end
	  }
	}
	gls.left[14] = {
	  DiagnosticWarn = {
	    provider = 'DiagnosticWarn',
	    icon = '  ',
	    highlight = {colors.yellow,colors.bg},
	  }
	}
	
	
	gls.left[15] = {
	    CocStatus = {
	     provider = CocStatus,
	     highlight = {colors.green,colors.bg},
	     icon = '  🗱'
	    }
	}
	
	gls.left[16] = {
	  CocFunc = {
	    provider = CocFunc,
	    icon = '  λ ',
	    highlight = {colors.yellow,colors.bg},
	  }
	}
	
	gls.right[4] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    separator = ' | ',
	    separator_highlight = {colors.blue,colors.line_bg},
	    highlight = {colors.fg,colors.line_bg},
	  },
	}
	gls.right[5] = {
	  PerCent = {
	    provider = 'LinePercent',
	    separator = ' ',
	    separator_highlight = {colors.line_bg,colors.line_bg},
	    highlight = {colors.cyan,colors.darkblue,'bold'},
	  }
	}
	
	gls.short_line_left[1] = {
	  LeftEnd = {
	    provider = function() return '' end,
	    separator = '',
	    separator_highlight = {colors.bg},
	    highlight = {colors.bg}
	  }
	}
	
	-- gls.right[4] = {
	--   ScrollBar = {
	--     provider = 'ScrollBar',
	--     highlight = {colors.blue,colors.purple},
	--   }
	-- }
	--
	-- gls.right[3] = {
	--   Vista = {
	--     provider = VistaPlugin,
	--     separator = ' ',
	--     separator_highlight = {colors.bg,colors.line_bg},
	--     highlight = {colors.fg,colors.line_bg,'bold'},
	--   }
	-- }
68d8eca64725c17b0e57a7d07e6c4cf2|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|26|14|v|lua
	008080
4a7d1ed414474e4033ac29ccb8653d9b|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|20|12|v|lua
	0000
56af022d804538a82b2c7a1f25369c8e|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|20|1|V|lua
	    bg = '#0000',
	    line_bg = '#0000',
	    fg = '#0000',
	    fg_green = '#0000',
3dc87f44f78f38645319a183e07832a4|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|151|1|V|lua
	    separator = '',
	    separator_highlight = {colors.yellow,function()
	      if not buffer_not_empty() then
	        return colors.bg
	      end
	      return colors.bg
	    end},
d517ac1d318ce37ff2b568658f1b6f2b|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|262|1|V|lua
	gls.right[4] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    separator = ' | ',
	    separator_highlight = {colors.blue,colors.line_bg},
	    highlight = {colors.fg,colors.line_bg},
	  },
	}
0e5073a0f49f2c356d3e0cf7b8549579|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|262|1|V|lua
	gls.right[4] = {
	  ScrollBar = {
	    provider = 'ScrollBar',
	    highlight = {colors.yellow,colors.purple},
	  }
	}
	gls.right[5] = {
	  PerCent = {
	    provider = 'LinePercent',
	    separator = ' ',
	    separator_highlight = {colors.line_bg,colors.line_bg},
	    highlight = {colors.cyan,colors.darkblue,'bold'},
	  }
	}
6904f3c79d2d4c3b6b1b15b8d195e4d3|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|19|1|V|lua
	local colors = {
	    bg = '#0000',
	    line_bg = '#0000',
	    fg = '#0000',
	    fg_green = '#0000',
	
	    yellow = '#fabd2f',
	    cyan = '#008080',
	    darkblue = '#081633',
	    green = '#afd700',
	    orange = '#FF8800',
	    purple = '#5d4d7a',
	    magenta = '#c678dd',
	    blue = '#51afef';
	    red = '#ec5f67'
	}
a4fcfb291479adb375074f4b6ab20001|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|28|15|v|lua
	afd700
c52ba05d22d998270763dddf51808e2a|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|19|1|V|lua
	local colors = {
	    bg = '#0000',
	    line_bg = '#0000',
	    fg = '#0000',
	    fg_green = '#0000',
	
	    yellow = '#fabd2f',
	    cyan = '#008080',
	    darkblue = '#081633',
	    green = '#608B4E',
	    orange = '#FF8800',
	    purple = '#5d4d7a',
	    magenta = '#c678dd',
	    blue = '#51afef';
	    red = '#ec5f67'
	}
db14b0681cee93434d85816572ad9fc0|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|28|1|V|lua
	    green = '#AB47BC',
60f7c740263acbc0fc86e7f98f275905|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|149|35|v|lua
	 Louis
9e79429f8d47c38f8d8183bc8a43f1c4|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|285|16|V|lua
	gls.right[3] = {
	  PerCent = {
	    provider = 'LinePercent',
	    separator = ' |',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
9f54ba30799f9bfaf5ac7ff92d75e116|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|302|1|V|lua
	gls.right[4] = {
	  ScrollBar = {
	    provider = 'ScrollBar',
	    highlight = {colors.yellow,colors.purple},
	  }
	}
c793b306b5fab05de3df744db4a28917|file:///Users/louis/.config/nvim/init.vim|34|1|V|vim
	Plug 'tpope/vim-commentary'
c0290482094b28aa2812504f3005d019|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|277|1|V|lua
	gls.right[2] = {
	  LineInfo = {
	    provider = 'LineColumn',
	    separator = ' | ',
	    separator_highlight = {colors.darkblue,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  },
	}
4578ab38cc62cfa3537b60c7da9ef738|file:///Users/louis/.config/nvim/lua/plugins/galaxyline-config.lua|269|1|V|lua
	gls.right[3]= {
	  FileFormat = {
	    provider = 'FileFormat',
	    separator = ' ',
	    separator_highlight = {colors.bg,colors.bg},
	    highlight = {colors.grey,colors.bg},
	  }
	}
4373271e72b7dae0d52f527fef94d929|file:///Users/louis/.config/nvim/init.vim|24|1|V|vim
	Plug 'tpope/vim-fugitive'
96714c9d36de9b638d9efd4e60f38bfe|file:///Users/louis/.tmux.conf|63|1|v|tmux
	tmux
86807c844a7abd86bb65a569931bad0d|file:///Users/louis/.tmux.conf|63|4|v|tmux
	-option
5a49510c756a1f82bf3a75efcc963e13|file:///Users/louis/.tmux.conf|63|25|v|tmux
	${gray}
2e25fa5f0913fa5ce9c988ab7f838239|file:///Users/louis/.tmux.conf|63|34|v|tmux
	${white}
e1a8bf80efc41d860ec05ea18cfc2d90|file:///Users/louis/.tmux.conf|65|25|v|tmux
	#00000
dcddb75469b4b4875094e14561e573d8|file:///Users/louis/.tmux.conf|65|44|v|tmux
	00000
5e96bf62b9b2c18fdb65564b4a18fd1f|file:///Users/louis/.tmux.conf|9|1|v|tmux
	transparent
a292cf681d24ce485542e442839910a0|file:///Users/louis/.tmux.conf|65|9|v|tmux
	tatus
8581a1e078f5969c0a6d2a6701579075|file:///Users/louis/.tmux.conf|65|9|V|tmux
	set -g status-style "bg=${black},fg=${black}"
662fd9481b9b2c108061fccbbdd5b223|file:///Users/louis/.tmux.conf|64|39|v|tmux
	dark_purple
ef3e30e070f70244fd6578d88a6b77ac|file:///Users/louis/.tmux.conf|66|5|v|tmux
	option
cda7a650c5856cf2f6738072447d7825|file:///Users/louis/.tmux.conf|66|32|v|tmux
	gray
5b1a01167872fe25d9f1eb7d275b9d49|file:///Users/louis/.tmux.conf|57|9|V|tmux
	set -g @plugin 'tmux-plugins/tpm'
	set -g @plugin 'dracula/tmux'
1d5eb249eba1e82127bd975273bda1a1|file:///Users/louis/.tmux.conf|58|9|V|tmux
	set -g @plugin 'dracula/tmux'
	set -g @dracula-show-weather false
53a981fb43b82f3da51b3a6d3404865f|file:///Users/louis/.tmux.conf|58|9|V|tmux
	set -g @plugin 'dracula/tmux'
40c8f82f349fe3051770a3f698f36ec1|file:///Users/louis/.tmux.conf|63|14|V|tmux
	set -g pane-active-border-style "fg=${black}"
d75e74cc2d7b10dbbc1c9ad0fd2ce44b|file:///Users/louis/.tmux.conf|64|14|V|tmux
	set -g pane-border-style "fg=${black}"
5c9cf0b00c9dd241a6787546ec425698|file:///Users/louis/.tmux.conf|9|13|V|tmux
	black='#0000'
e0d2a3d88f8a326a63ebd5d0200b9558|file:///Users/louis/.config/suckless/tmux/.tmux/plugins/tmux/scripts/dracula.sh|45|1|V|sh
	  black="#00000"
d508fe45cecaf653904a0e774084bb5c|file:///Users/louis/.config/suckless/tmux/.tmux/plugins/tmux/scripts/dracula.sh|123|53|v|sh
	white
6423c858368906738d7b040b430049da|file:///Users/louis/.config/suckless/tmux/.tmux/plugins/tmux/scripts/dracula.sh|47|3|v|sh
	light_purple
52f7d6eb653d1f97c07ecedd44af4592|file:///Users/louis/.config/suckless/tmux/.tmux/plugins/tmux/scripts/dracula.sh|47|18|v|sh
	bd93f9
441b0863c72cbd4c3844ca9f7fb03f26|file:///Users/louis/.config/suckless/tmux/.tmux/plugins/tmux/scripts/dracula.sh|48|16|v|sh
	#6272a4
f43dd60a2a69c836aa4eb172a48d6e1e|file:///Users/louis/.config/suckless/tmux/.tmux/plugins/tmux/scripts/dracula.sh|93|17|v|sh
	window_flags
